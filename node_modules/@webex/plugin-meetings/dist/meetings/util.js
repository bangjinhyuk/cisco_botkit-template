'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _constants = require('../constants');

var _parameter = require('../common/errors/parameter');

var _parameter2 = _interopRequireDefault(_parameter);

var _loggerProxy = require('../common/logs/logger-proxy');

var _loggerProxy2 = _interopRequireDefault(_loggerProxy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MeetingsUtil = {}; /* globals window */

MeetingsUtil.extractDestination = function (destination, type) {
  var dest = destination;

  if (type === _constants._LOCUS_ID_) {
    if (!(destination && destination.url)) {
      throw new _parameter2.default('You cannot create a meeting by locus without a locus.url defined');
    }
    dest = destination.url;
  }

  return dest;
};

// ** This is a workaround to fix Firefox and google android not downloading H264 codec on start
MeetingsUtil.triggerH264Codec = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
  var testPeerconnection;
  return _regenerator2.default.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          testPeerconnection = new window.RTCPeerConnection();
          _context.next = 4;
          return testPeerconnection.createOffer();

        case 4:
          testPeerconnection.close();
          testPeerconnection = null;
          _context.next = 11;
          break;

        case 8:
          _context.prev = 8;
          _context.t0 = _context['catch'](0);

          _loggerProxy2.default.logger.info('Meetings:util#triggerH264Codec --> cannot trigger H264 codec download');

        case 11:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, undefined, [[0, 8]]);
}));

MeetingsUtil.getMeetingAddedType = function (type) {
  return type === _constants._LOCUS_ID_ ? _constants._INCOMING_ : _constants._CREATED_;
};

MeetingsUtil.handleRoapMercury = function (envelope, meetingCollection) {
  var data = envelope.data;
  var eventType = data.eventType;


  if (eventType === _constants.LOCUSEVENT.MESSAGE_ROAP) {
    var meeting = meetingCollection.getByKey(_constants.CORRELATION_ID, data.correlationId);

    if (meeting) {
      meeting.roap.roapEvent(data);
    }
  }
};

MeetingsUtil.checkForCorrelationId = function (deviceUrl, locus) {
  var devices = [];

  if (locus) {
    if (locus && locus.self && locus.self.devices) {
      devices = locus.self.devices;
    }

    var foundDevice = devices.find(function (device) {
      return device.url === deviceUrl;
    });

    if (foundDevice && foundDevice.correlationId) {
      return foundDevice.correlationId;
    }
  }

  return false;
};

exports.default = MeetingsUtil;
//# sourceMappingURL=util.js.map
