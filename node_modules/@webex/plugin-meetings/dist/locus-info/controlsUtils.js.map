{"version":3,"sources":["controlsUtils.js"],"names":["ControlsUtils","parse","controls","parsedControls","record","modifiedBy","getId","paused","recording","lastModified","meta","getControls","oldControls","newControls","previous","current","hasRecord","updates","hasRecordingPausedChanged","hasRecordingChanged"],"mappings":";;;;;;;;;;;;;;;;AAEA,IAAMA,gBAAgB,EAAtB;;AAEA;;;;;;;;;AASA;;;;;;AAMAA,cAAcC,KAAd,GAAsB,UAACC,QAAD,EAAc;AAClC,MAAMC,4CAAqBD,QAArB,CAAN;;AAEA,MAAIA,YAAYA,SAASE,MAAzB,EAAiC;AAC/BD,mBAAeC,MAAf,GAAwB;AACtBC,kBAAYL,cAAcM,KAAd,CAAoBJ,QAApB,CADU;AAEtBK,cAAQL,SAASE,MAAT,CAAgBG,MAAhB,GAAyBL,SAASE,MAAT,CAAgBG,MAAzC,GAAkD,KAFpC;AAGtBC,iBAAWN,SAASE,MAAT,CAAgBI,SAHL;AAItBC,oBAAcP,SAASE,MAAT,CAAgBM,IAAhB,CAAqBD;AAJb,KAAxB;AAMD;;AAED,SAAON,cAAP;AACD,CAbD;;AAeA;;;;;;AAMAH,cAAcW,WAAd,GAA4B,UAACC,WAAD,EAAcC,WAAd,EAA8B;AACxD,MAAMC,WAAWd,cAAcC,KAAd,CAAoBW,WAApB,CAAjB;AACA,MAAMG,UAAUf,cAAcC,KAAd,CAAoBY,WAApB,CAAhB;AACA,MAAMG,YAAY,SAAZA,SAAY,CAACd,QAAD;AAAA,WAAcA,YAAY,CAAC,CAACA,SAASE,MAArC;AAAA,GAAlB;;AAEA,SAAO;AACLU,sBADK;AAELC,oBAFK;AAGLE,aAAS;AACPC,iCAA2BF,UAAUD,OAAV,KAAsB,CAAC,uBAChDC,UAAUF,QAAV,KAAuBA,SAASV,MAAT,CAAgBG,MADS,EAEhDQ,QAAQX,MAAR,CAAeG,MAFiC,CAD3C;AAKPY,2BAAqBH,UAAUD,OAAV,KAAsB,CAAC,uBAC1CC,UAAUF,QAAV,KAAuBA,SAASV,MAAT,CAAgBI,SADG,EAE1CO,QAAQX,MAAR,CAAeI,SAF2B;AALrC;AAHJ,GAAP;AAcD,CAnBD;;AAqBA;;;;;AAKAR,cAAcM,KAAd,GAAsB,UAACJ,QAAD,EAAc;AAClC,MAAIA,SAASE,MAAT,CAAgBM,IAApB,EAA0B;AACxB,WAAOR,SAASE,MAAT,CAAgBM,IAAhB,CAAqBL,UAA5B;AACD;;AAED,SAAO,IAAP;AACD,CAND;;kBAQeL,a","file":"controlsUtils.js","sourcesContent":["import {isEqual} from 'lodash';\n\nconst ControlsUtils = {};\n\n/**\n * Controls\n * @typedef {Object} LocusControls\n * @property {Object} record\n * @property {Boolean} record.recording\n * @property {Object} record.meta\n * @property {String} record.meta.modifiedBy\n */\n\n/**\n * parse the relevant host values that we care about: id\n * @param {LocusControls} controls\n * @returns {Object} parsedObject - parsed host or null if host was undefined\n * @returns {String} parsedObject.recordingId\n */\nControlsUtils.parse = (controls) => {\n  const parsedControls = {...controls};\n\n  if (controls && controls.record) {\n    parsedControls.record = {\n      modifiedBy: ControlsUtils.getId(controls),\n      paused: controls.record.paused ? controls.record.paused : false,\n      recording: controls.record.recording,\n      lastModified: controls.record.meta.lastModified\n    };\n  }\n\n  return parsedControls;\n};\n\n/**\n * parses and returns previous state vs current state and triggers the changes.\n * @param {LocusControl} oldControls previous state\n * @param {LocusControl} newControls current state\n * @returns {Object} combination of state plus the changes\n */\nControlsUtils.getControls = (oldControls, newControls) => {\n  const previous = ControlsUtils.parse(oldControls);\n  const current = ControlsUtils.parse(newControls);\n  const hasRecord = (controls) => controls && !!controls.record;\n\n  return {\n    previous,\n    current,\n    updates: {\n      hasRecordingPausedChanged: hasRecord(current) && !isEqual(\n        hasRecord(previous) && previous.record.paused,\n        current.record.paused\n      ),\n      hasRecordingChanged: hasRecord(current) && !isEqual(\n        hasRecord(previous) && previous.record.recording,\n        current.record.recording\n      )\n    }\n  };\n};\n\n/**\n * Extract the id from the record controls object\n * @param {LocusControls} controls\n * @returns {String|null}\n */\nControlsUtils.getId = (controls) => {\n  if (controls.record.meta) {\n    return controls.record.meta.modifiedBy;\n  }\n\n  return null;\n};\n\nexport default ControlsUtils;\n"]}