'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _isEqual2 = require('lodash/isEqual');

var _isEqual3 = _interopRequireDefault(_isEqual2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ControlsUtils = {};

/**
 * Controls
 * @typedef {Object} LocusControls
 * @property {Object} record
 * @property {Boolean} record.recording
 * @property {Object} record.meta
 * @property {String} record.meta.modifiedBy
 */

/**
 * parse the relevant host values that we care about: id
 * @param {LocusControls} controls
 * @returns {Object} parsedObject - parsed host or null if host was undefined
 * @returns {String} parsedObject.recordingId
 */
ControlsUtils.parse = function (controls) {
  var parsedControls = (0, _extends3.default)({}, controls);

  if (controls && controls.record) {
    parsedControls.record = {
      modifiedBy: ControlsUtils.getId(controls),
      paused: controls.record.paused ? controls.record.paused : false,
      recording: controls.record.recording,
      lastModified: controls.record.meta.lastModified
    };
  }

  return parsedControls;
};

/**
 * parses and returns previous state vs current state and triggers the changes.
 * @param {LocusControl} oldControls previous state
 * @param {LocusControl} newControls current state
 * @returns {Object} combination of state plus the changes
 */
ControlsUtils.getControls = function (oldControls, newControls) {
  var previous = ControlsUtils.parse(oldControls);
  var current = ControlsUtils.parse(newControls);
  var hasRecord = function hasRecord(controls) {
    return controls && !!controls.record;
  };

  return {
    previous: previous,
    current: current,
    updates: {
      hasRecordingPausedChanged: hasRecord(current) && !(0, _isEqual3.default)(hasRecord(previous) && previous.record.paused, current.record.paused),
      hasRecordingChanged: hasRecord(current) && !(0, _isEqual3.default)(hasRecord(previous) && previous.record.recording, current.record.recording)
    }
  };
};

/**
 * Extract the id from the record controls object
 * @param {LocusControls} controls
 * @returns {String|null}
 */
ControlsUtils.getId = function (controls) {
  if (controls.record.meta) {
    return controls.record.meta.modifiedBy;
  }

  return null;
};

exports.default = ControlsUtils;
//# sourceMappingURL=controlsUtils.js.map
