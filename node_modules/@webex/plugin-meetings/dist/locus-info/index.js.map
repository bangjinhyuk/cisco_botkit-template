{"version":3,"sources":["index.js"],"names":["LocusInfo","updateMeeting","webex","meetingId","parsedLocus","states","emitChange","compareAndUpdateFlags","locus","created","scheduledMeeting","meeting","participantsUrl","replaces","aclUrl","baseSequence","sequence","membership","identities","participants","deltaParticipants","updateParticipants","updateConversationUrl","conversationUrl","info","updateControls","controls","updateLocusUrl","url","updateFullState","fullState","updateMeetingInfo","updateSelf","self","updateHostInfo","host","updateMediaShares","mediaShares","Parser","updateWithDeltaLocus","onFullLocus","data","eventType","LoggerProxy","logger","LOCUSEVENT","PARTICIPANT_JOIN","PARTICIPANT_LEFT","CONTROLS_UPDATED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_AUDIO_UNMUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_UNMUTED","SELF_CHANGED","PARTICIPANT_UPDATED","PARTICIPANT_CONTROLS_UPDATED","PARTICIPANT_ROLES_UPDATED","PARTICIPANT_DECLINED","FLOOR_GRANTED","FLOOR_RELEASED","DIFFERENCE","scope","eventName","args","emit","error","updateParticipantDeltas","reportParticipantChanges","updateLocusInfo","isMeetingActive","handleOneOnOneEvent","type","_CALL_","emitScoped","file","function","EVENTS","REMOTE_ANSWERED_DECLINED","remoteDeclined","remoteAnswered","updateCreated","updateParticipantsUrl","updateReplace","replace","updateAclUrl","updateBasequence","updateSequence","updateMemberShip","updateIdentifiers","compareAndUpdate","length","find","participant","identity","_USER_","removed","partner","getLocusPartner","state","LOCUS","STATE","INACTIVE","warn","Metrics","postEvent","event","REMOTE_ENDED","DESTROY_MEETING","reason","CALL_REMOVED_REASON","CALL_INACTIVE","shouldLeave","MEETING_STATE","STATES","LEFT","DECLINED","NOTIFIED","JOINED","PARTNER_LEFT","joinedWith","_LEFT_","IDLE","SELF_LEFT","_MEETING_","TERMINATING","MEETING_REMOVED_REASON","MEETING_INACTIVE_TERMINATING","FULLSTATE_REMOVED","SELF_REMOVED","compareSelfAndHost","compareHostAndSelf","selfIdentity","hostId","moderator","LOCUS_INFO_CAN_ASSIGN_HOST","canAssignHost","findParticipant","person","collection","id","determineChanges","deltas","reduce","key","changes","target","undefined","AUDIO_STATUS","PARTICIPANT_DELTAS","TARGETS","AUDIO","VIDEO_STATUS","VIDEO","status","_INACTIVE_","DISABLED","_RECEIVE_ONLY_","MUTED","_SEND_RECEIVE_","UNMUTED","UNKNOWN","push","forEach","changedParticipant","delta","every","change","meetings","meetingCollection","get","sendOperationalMetric","METRICS_OPERATIONAL_MEASURES","MEETING_MEDIA_RELEASE","correlation_id","correlationId","locus_id","locusId","item","generateDelta","prevState","newState","audioStatus","videoSlidesStatus","videoStatus","existingParticipant","changed","LOCUS_INFO_UPDATE_PARTICIPANTS","recordingId","modifiedBy","selfId","ControlsUtils","parse","getControls","updates","current","hasRecordingChanged","hasRecordingPausedChanged","record","recording","RECORDING_STATE","RECORDING","paused","PAUSED","RESUMED","LOCUSINFO","CONTROLS_RECORDING_UPDATED","lastModified","result","FullState","getFullState","meetingStateChangedTo","FULL_STATE_MEETING_STATE_CHANGE","previousState","previous","meetingState","currentState","meetingTypeChangedTo","FULL_STATE_TYPE_UPDATE","parsedHosts","HostUtils","getHosts","isNewHost","LOCUS_INFO_UPDATE_HOST","newHost","oldHost","InfoUtils","parsePolicy","parseModerator","parsedInfo","getInfos","MEETING_INFO_UPDATED","isLocked","MEETING_LOCKED","isUnlocked","MEETING_UNLOCKED","parsedMediaShares","MediaSharesUtils","getMediaShares","LOCUS_INFO_UPDATE_MEDIA_SHARES","parsedSelves","SelfUtils","getSelves","internal","device","element","getSipUrl","sipUri","moderatorChanged","isMediaInactiveOrReleased","DISCONNECT_DUE_TO_INACTIVITY","SELF_MODERATOR_CHANGED","isMutedByOthers","SELF_MUTED_BY_OTHERS","isUnadmittedGuest","SELF_UNADMITTED_GUEST","isAdmittedGuest","SELF_ADMITTED_GUEST","isMediaInactive","MEDIA_INACTIVITY","getMediaStatus","mediaSessions","LOCUS_INFO_UPDATE_SELF","oldSelf","newSelf","locusUrl","LOCUS_INFO_UPDATE_URL","EventsScope"],"mappings":"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","file":"index.js","sourcesContent":["import {isEqual} from 'lodash';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport EventsScope from '../common/events/events-scope';\nimport {\n  EVENTS,\n  LOCUSEVENT,\n  _USER_,\n  _CALL_,\n  MEETING_STATE,\n  _MEETING_,\n  LOCUSINFO,\n  LOCUS,\n  _LEFT_,\n  MEETING_REMOVED_REASON,\n  CALL_REMOVED_REASON,\n  AUDIO_STATUS,\n  VIDEO_STATUS,\n  _RECEIVE_ONLY_,\n  _SEND_RECEIVE_,\n  _INACTIVE_,\n  PARTICIPANT_DELTAS,\n  METRICS_OPERATIONAL_MEASURES,\n  RECORDING_STATE\n} from '../constants';\nimport Metrics from '../metrics';\nimport {eventType} from '../metrics/config';\nimport InfoUtils from '../locus-info/infoUtils';\nimport FullState from '../locus-info/fullState';\nimport SelfUtils from '../locus-info/selfUtils';\nimport HostUtils from '../locus-info/hostUtils';\nimport ControlsUtils from '../locus-info/controlsUtils';\nimport MediaSharesUtils from '../locus-info/mediaSharesUtils';\nimport Parser from '../locus-info/parser';\n\n\n/**\n * @description LocusInfo extends ChildEmitter to convert locusInfo info a private emitter to parent object\n * @export\n * @private\n * @class LocusInfo\n */\nexport default class LocusInfo extends EventsScope {\n  constructor(updateMeeting, webex, meetingId) {\n    super();\n    this.parsedLocus = {\n      states: []\n    };\n    this.webex = webex;\n    this.emitChange = false;\n    this.compareAndUpdateFlags = {};\n    this.meetingId = meetingId;\n    this.updateMeeting = updateMeeting;\n  }\n\n  /**\n   * @param {Locus} locus\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  init(locus = {}) {\n    this.created = locus.created || null;\n    this.scheduledMeeting = locus.meeting || null;\n    this.participantsUrl = locus.participantsUrl || null;\n    this.replaces = locus.replaces || null;\n    this.aclUrl = locus.aclUrl || null;\n    this.baseSequence = locus.baseSequence || null;\n    this.sequence = locus.sequence || null;\n    this.membership = locus.membership || null;\n    this.identities = locus.identities || null;\n    this.participants = locus.participants || null;\n\n    /**\n     * Stores the delta values for a changed participant.\n     *\n     * @typedef {Object} DeltaParticipant\n     * @property {Record<string, boolean>} delta - Contains changed streams.\n     * @property {Object} person - Contains person data.\n     */\n\n    /**\n     * Stored participant changes between the last event and the current event.\n     * All previously stored events are overwritten between events.\n     *\n     * @instance\n     * @type {Array<DeltaParticipant>}\n     * @private\n     * @member LocusInfo\n     */\n    this.deltaParticipants = [];\n\n    // above section only updates the locusInfo object\n    // The below section makes sure it updates the locusInfo as well as updates the meeting object\n    this.updateParticipants(locus.participants);\n    // For 1:1 space meeting the conversation Url does not exist in locus.conversation\n    this.updateConversationUrl(locus.conversationUrl, locus.info);\n    this.updateControls(locus.controls);\n    this.updateLocusUrl(locus.url);\n    this.updateFullState(locus.fullState);\n    this.updateMeetingInfo(locus.info);\n    // self and participants generate sipUrl for 1:1 meeting\n    this.updateSelf(locus.self, locus.participants);\n    this.updateHostInfo(locus.host);\n    this.updateMediaShares(locus.mediaShares);\n  }\n\n  /**\n   * @param {Object} locus\n   * @param {Meeting} meeting\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  initialSetup(locus, meeting) {\n    // meeting already exisits just do an update\n    if (meeting) {\n      // Its a new delta event fetch the whole meeting object\n      Parser.updateWithDeltaLocus(locus, meeting);\n    }\n    else {\n      this.onFullLocus(locus);\n    }\n\n    // Change it to true after it recives it first locus object\n    this.emitChange = true;\n  }\n\n  /**\n   * @param {Meeting} meeting\n   * @param {Object} data\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  parse(meeting, data) {\n    const {eventType} = data;\n\n    LoggerProxy.logger.info(`Locus-info:index#parse --> received locus data: ${eventType}`);\n\n    switch (eventType) {\n      case LOCUSEVENT.PARTICIPANT_JOIN:\n      case LOCUSEVENT.PARTICIPANT_LEFT:\n      case LOCUSEVENT.CONTROLS_UPDATED:\n      case LOCUSEVENT.PARTICIPANT_AUDIO_MUTED:\n      case LOCUSEVENT.PARTICIPANT_AUDIO_UNMUTED:\n      case LOCUSEVENT.PARTICIPANT_VIDEO_MUTED:\n      case LOCUSEVENT.PARTICIPANT_VIDEO_UNMUTED:\n      case LOCUSEVENT.SELF_CHANGED:\n      case LOCUSEVENT.PARTICIPANT_UPDATED:\n      case LOCUSEVENT.PARTICIPANT_CONTROLS_UPDATED:\n      case LOCUSEVENT.PARTICIPANT_ROLES_UPDATED:\n      case LOCUSEVENT.PARTICIPANT_DECLINED:\n      case LOCUSEVENT.FLOOR_GRANTED:\n      case LOCUSEVENT.FLOOR_RELEASED:\n        this.onFullLocus(data.locus, eventType);\n        break;\n      case LOCUSEVENT.DIFFERENCE:\n        Parser.updateWithDeltaLocus(data.locus, meeting);\n        break;\n\n      default:\n        // Why will there be a event with no eventType ????\n        // we may not need this, we can get full locus\n        Parser.updateWithDeltaLocus(data.locus, meeting);\n    }\n  }\n\n  /**\n   * @param {String} scope\n   * @param {String} eventName\n   * @param {Array} args\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  emitScoped(scope, eventName, args) {\n    return this.emit(scope, eventName, args);\n  }\n\n  /**\n   * updates the locus with full locus object\n   * @param {object} locus locus object\n   * @param {sting} eventType particulat locus event\n   * @returns {object} null\n   * @memberof LocusInfo\n   */\n  onFullLocus(locus, eventType) {\n    if (!locus) {\n      LoggerProxy.logger.error('Locus-info:index#onFullLocus --> object passed as argument was invalid, continuing.');\n    }\n    this.updateParticipantDeltas(locus.participants);\n    this.participants = locus.participants;\n    this.reportParticipantChanges();\n    this.updateLocusInfo(locus);\n    this.updateParticipants(locus.participants);\n    this.isMeetingActive();\n    this.handleOneOnOneEvent(eventType);\n  }\n\n  // used for ringing stops on one on one\n  /**\n   * @param {String} eventType\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  handleOneOnOneEvent(eventType) {\n    if (this.parsedLocus.info.type === _CALL_) {\n    // for 1:1 bob calls alice and alice declines, notify the meeting state\n      if (eventType === LOCUSEVENT.PARTICIPANT_DECLINED) {\n      // trigger the event for stop ringing\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'handleOneonOneEvent'\n          },\n          EVENTS.REMOTE_ANSWERED_DECLINED,\n          {\n            remoteDeclined: true,\n            remoteAnswered: false\n          }\n        );\n      }\n      // for 1:1 bob calls alice and alice answers, notify the meeting state\n      if (eventType === LOCUSEVENT.PARTICIPANT_JOIN) {\n      // trigger the event for stop ringing\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'handleOneonOneEvent'\n          },\n          EVENTS.REMOTE_ANSWERED_DECLINED,\n          {\n            remoteDeclined: false,\n            remoteAnswered: true\n          }\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {Object} locus\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  onDeltaLocus(locus) {\n    this.updateLocusInfo(locus);\n    this.updateParticipants(locus.participants);\n    this.isMeetingActive();\n  }\n\n  /**\n   * @param {Object} locus\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateLocusInfo(locus) {\n    this.updateControls(locus.controls);\n    this.updateConversationUrl(locus.conversationUrl, locus.info);\n    this.updateCreated(locus.created);\n    this.updateFullState(locus.fullState);\n    this.updateHostInfo(locus.host);\n    this.updateMeetingInfo(locus.info, locus.self);\n    this.updateMediaShares(locus.mediaShares);\n    this.updateParticipantsUrl(locus.participantsUrl);\n    this.updateReplace(locus.replace);\n    this.updateSelf(locus.self, locus.participants);\n    this.updateLocusUrl(locus.url);\n    this.updateAclUrl(locus.aclUrl);\n    this.updateBasequence(locus.baseSequence);\n    this.updateSequence(locus.sequence);\n    this.updateMemberShip(locus.membership);\n    this.updateIdentifiers(locus.identities);\n    this.compareAndUpdate();\n    // update which required to compare different objects from locus\n  }\n\n  /**\n   * @param {Array} participants\n   * @param {Object} self\n   * @returns {Array}\n   * @memberof LocusInfo\n   */\n  getLocusPartner(participants, self) {\n    if (!participants || participants.length === 0) {\n      return null;\n    }\n\n    return participants.find((participant) =>\n      (self && participant.identity !== self.identity) &&\n  (participants.length <= 2 || (participant.type === _USER_ && !participant.removed))) || this.partner;\n  }\n\n  // TODO: all the leave states need to be checked\n  /**\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  isMeetingActive() {\n    if (this.parsedLocus.fullState.type === _CALL_) {\n      const partner = this.getLocusPartner(this.participants, this.self);\n\n      this.updateMeeting({partner});\n\n      // Check if guest user needs to be checked here\n\n      // 1) when bob declines call from bob, (bob='DECLINED')\n      // 2) When alice rejects call to bob , (bob='NOTIFIED')\n\n      // When we dont add MEDIA for condition 2. The state of bob='IDLE'\n\n      if (this.fullState && this.fullState.state === LOCUS.STATE.INACTIVE) {\n        // TODO: update the meeting state\n        LoggerProxy.logger.warn('Locus-info:index#isMeetingActive --> Call Ended, locus state is inactive.');\n        Metrics.postEvent({\n          event: eventType.REMOTE_ENDED,\n          meetingId: this.meetingId\n        });\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            reason: CALL_REMOVED_REASON.CALL_INACTIVE,\n            shouldLeave: false\n          }\n        );\n      }\n      else\n      if (partner.state === MEETING_STATE.STATES.LEFT &&\n        this.parsedLocus.self &&\n        (this.parsedLocus.self.state === MEETING_STATE.STATES.DECLINED ||\n        this.parsedLocus.self.state === MEETING_STATE.STATES.NOTIFIED ||\n        this.parsedLocus.self.state === MEETING_STATE.STATES.JOINED)) {\n        Metrics.postEvent({\n          event: eventType.REMOTE_ENDED,\n          meetingId: this.meetingId\n        });\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            reason: CALL_REMOVED_REASON.PARTNER_LEFT,\n            shouldLeave: this.parsedLocus.self.joinedWith && this.parsedLocus.self.joinedWith.state !== _LEFT_\n          }\n        );\n      }\n      else\n      if (this.parsedLocus.self &&\n        this.parsedLocus.self.state === MEETING_STATE.STATES.LEFT &&\n      (partner.state === MEETING_STATE.STATES.LEFT ||\n      partner.state === MEETING_STATE.STATES.DECLINED ||\n      partner.state === MEETING_STATE.STATES.NOTIFIED ||\n      partner.state === MEETING_STATE.STATES.IDLE) // Happens when user just joins and adds no Media\n      ) {\n        Metrics.postEvent({\n          event: eventType.REMOTE_ENDED,\n          meetingId: this.meetingId\n        });\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            reason: CALL_REMOVED_REASON.SELF_LEFT,\n            shouldLeave: false\n          }\n        );\n      }\n    }\n    else if (this.parsedLocus.fullState.type === _MEETING_) {\n      if (this.fullState && (this.fullState.state === LOCUS.STATE.INACTIVE || this.fullState.state === LOCUS.STATE.TERMINATING)) {\n        Metrics.postEvent({\n          event: eventType.REMOTE_ENDED,\n          meetingId: this.meetingId\n        });\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            reason: MEETING_REMOVED_REASON.MEETING_INACTIVE_TERMINATING,\n            shouldLeave: false\n          }\n        );\n      }\n      else if (this.fullState && this.fullState.removed) {\n        // user has been dropped from a meeting\n        Metrics.postEvent({\n          event: eventType.REMOTE_ENDED,\n          meetingId: this.meetingId\n        });\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            reason: MEETING_REMOVED_REASON.FULLSTATE_REMOVED,\n            shouldLeave: false\n          }\n        );\n      }\n      // If you are  guest and you are removed from the meeting\n      // You wont get any further events\n      else if (this.parsedLocus.self && this.parsedLocus.self.removed) {\n        // Check if we need to send an event\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            reason: MEETING_REMOVED_REASON.SELF_REMOVED,\n            shouldLeave: false\n          }\n        );\n      }\n    }\n    else {\n      LoggerProxy.logger.warn('Locus-info:index#isMeetingActive --> Meeting Type is unknown.');\n    }\n  }\n\n  /**\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  compareAndUpdate() {\n    if (this.compareAndUpdateFlags.compareSelfAndHost || this.compareAndUpdateFlags.compareHostAndSelf) {\n      this.compareSelfAndHost();\n    }\n  }\n\n  /**\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  compareSelfAndHost() {\n    if ((this.parsedLocus.self.selfIdentity === this.parsedLocus.host.hostId) && this.parsedLocus.self.moderator) {\n      this.emitScoped(\n        {\n          file: 'locus-info',\n          function: 'compareSelfAndHost'\n        },\n        EVENTS.LOCUS_INFO_CAN_ASSIGN_HOST,\n        {\n          canAssignHost: true\n        }\n      );\n    }\n    else {\n      this.emitScoped(\n        {\n          file: 'locus-info',\n          function: 'compareSelfAndHost'\n        },\n        EVENTS.LOCUS_INFO_CAN_ASSIGN_HOST,\n        {\n          canAssignHost: false\n        }\n      );\n    }\n  }\n\n  /**\n   * Report any participant changes via metrics requests.\n   *\n   * @returns {void}\n   */\n  reportParticipantChanges() {\n    // Used to find a participant from a given collection.\n    const findParticipant = (person = {}, collection = []) =>\n      collection.find((participant) => participant.person.id === person.id) ||\n      {};\n\n    // Used to setup a changes object for metrics.\n    const determineChanges = (participant, deltas) =>\n      Object.keys(deltas).reduce((states, key) => {\n        const changes = {\n          target: undefined,\n          state: undefined\n        };\n\n        switch (key) {\n          case AUDIO_STATUS:\n            changes.target = PARTICIPANT_DELTAS.TARGETS.AUDIO;\n            break;\n\n          case VIDEO_STATUS:\n            changes.target = PARTICIPANT_DELTAS.TARGETS.VIDEO;\n            break;\n\n          default:\n        }\n\n        switch (participant.status[key]) {\n          case _INACTIVE_:\n            changes.state = PARTICIPANT_DELTAS.STATES.DISABLED;\n            break;\n\n          case _RECEIVE_ONLY_:\n            changes.state = PARTICIPANT_DELTAS.STATES.MUTED;\n            break;\n\n          case _SEND_RECEIVE_:\n            changes.state = PARTICIPANT_DELTAS.STATES.UNMUTED;\n            break;\n\n          default:\n            changes.state = PARTICIPANT_DELTAS.STATES.UNKNOWN;\n        }\n\n        if (changes.target) {\n          states.push(changes);\n        }\n\n        return states;\n      }, []);\n\n    this.deltaParticipants.forEach(\n      (changedParticipant) => {\n        const participant = findParticipant(\n          changedParticipant.person,\n          this.participants\n        );\n\n        const changes = determineChanges(participant, changedParticipant.delta);\n\n        if (\n          changes.every(\n            (change) => (change.state === PARTICIPANT_DELTAS.STATES.DISABLED)\n          )\n        ) {\n          const meeting = this.webex.meetings.meetingCollection.get(\n            this.meetingId\n          );\n\n          Metrics.sendOperationalMetric(\n            METRICS_OPERATIONAL_MEASURES.MEETING_MEDIA_RELEASE,\n            {\n              correlation_id: meeting.correlationId,\n              locus_id: meeting.locusId,\n              reason: `${participant.person.id} left the meeting`\n            }\n          );\n        }\n      }\n    );\n  }\n\n  /**\n   * Update the deltaParticipants property of this object based on a list of\n   * provided participants.\n   *\n   * @param {Array} [participants] - The participants to update against.\n   * @returns {void}\n   */\n  updateParticipantDeltas(participants = []) {\n    // Used to find a participant within a participants collection.\n    const findParticipant = (participant, collection) =>\n      collection.find((item) => item.person.id === participant.person.id);\n\n    // Generates an object that indicates which state properties have changed.\n    const generateDelta = (prevState = {}, newState = {}) => {\n      // Setup deltas.\n      const deltas = {\n        audioStatus: prevState.audioStatus !== newState.audioStatus,\n        videoSlidesStatus: prevState.videoSlidesStatus !== newState.videoSlidesStatus,\n        videoStatus: prevState.videoStatus !== newState.videoStatus\n      };\n\n      // Clean the object\n      Object.keys(deltas).forEach(\n        (key) => {\n          if (deltas[key] !== true) {\n            delete deltas[key];\n          }\n        }\n      );\n\n      return deltas;\n    };\n\n    this.deltaParticipants = participants.reduce(\n      (collection, participant) => {\n        const existingParticipant = findParticipant(\n          participant,\n          this.participants || []\n        ) || {};\n\n        const delta = generateDelta(existingParticipant.status, participant.status);\n\n        const changed = (Object.keys(delta).length > 0);\n\n        if (changed) {\n          collection.push({\n            person: participant.person,\n            delta\n          });\n        }\n\n        return collection;\n      }, []\n    );\n  }\n\n  /**\n   *\n   * @param {Object} participants new participants object\n   * @param {boolen} deltaParticpantFlag  delta event\n   * @returns {Array} updatedParticipants\n   * @memberof LocusInfo\n   */\n  updateParticipants(participants) {\n    this.emitScoped(\n      {\n        file: 'locus-info',\n        function: 'updateParticipants'\n      },\n      EVENTS.LOCUS_INFO_UPDATE_PARTICIPANTS,\n      {\n        participants,\n        recordingId: this.parsedLocus.controls && this.parsedLocus.controls.modifiedBy,\n        selfIdentity: this.parsedLocus.self && this.parsedLocus.self.selfIdentity,\n        selfId: this.parsedLocus.self && this.parsedLocus.self.selfId,\n        hostId: this.parsedLocus.host && this.parsedLocus.host.hostId\n      }\n    );\n  }\n\n  /**\n   * @param {Object} controls\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateControls(controls) {\n    if (controls && !isEqual(this.controls, controls)) {\n      this.parsedLocus.controls = ControlsUtils.parse(controls);\n      const {updates, current} = ControlsUtils.getControls(this.controls, controls);\n\n      if (updates.hasRecordingChanged || updates.hasRecordingPausedChanged) {\n        let state = null;\n\n        if (updates.hasRecordingChanged) {\n          state = current.record.recording ? RECORDING_STATE.RECORDING : RECORDING_STATE.IDLE;\n        }\n        else if (updates.hasRecordingPausedChanged) {\n          state = current.record.paused ? RECORDING_STATE.PAUSED : RECORDING_STATE.RESUMED;\n        }\n\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateControls'\n          },\n          LOCUSINFO.EVENTS.CONTROLS_RECORDING_UPDATED,\n          {\n            state,\n            modifiedBy: current.record.modifiedBy,\n            lastModified: current.record.lastModified\n          }\n        );\n      }\n\n      this.controls = controls;\n    }\n  }\n\n  /**\n   * @param {String} conversationUrl\n   * @param {Object} info\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateConversationUrl(conversationUrl, info) {\n    if (conversationUrl && !isEqual(this.conversationUrl, conversationUrl)) {\n      this.conversationUrl = conversationUrl;\n      this.updateMeeting({conversationUrl});\n    }\n    else if (info && info.conversationUrl && !isEqual(this.conversationUrl, info.conversationUrl)) {\n      this.conversationUrl = info.conversationUrl;\n      this.updateMeeting({conversationUrl: info.conversationUrl});\n    }\n  }\n\n  /**\n   * @param {Object} created\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateCreated(created) {\n    if (created && !isEqual(this.created, created)) {\n      this.created = created;\n    }\n  }\n\n\n  /**\n   * @param {Object} fullState\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateFullState(fullState) {\n    if (fullState && !isEqual(this.fullState, fullState)) {\n      const result = FullState.getFullState(this.fullState, fullState);\n\n      this.updateMeeting(result.current);\n\n      if (result.updates.meetingStateChangedTo) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateFullState'\n          },\n          LOCUSINFO.EVENTS.FULL_STATE_MEETING_STATE_CHANGE,\n          {\n            previousState: result.previous && result.previous.meetingState,\n            currentState: result.current.meetingState\n          }\n        );\n      }\n\n      if (result.updates.meetingTypeChangedTo) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateFullState'\n          },\n          LOCUSINFO.EVENTS.FULL_STATE_TYPE_UPDATE,\n          {\n            type: result.current.type\n          }\n        );\n      }\n      this.parsedLocus.fullState = result.current;\n      this.fullState = fullState;\n    }\n  }\n\n  /**\n   * handles when the locus.host is updated\n   * @param {Object} host the locus.host property\n   * @returns {undefined}\n   * @memberof LocusInfo\n   * emits internal event locus_info_update_host\n   */\n  updateHostInfo(host) {\n    if (host && !isEqual(this.host, host)) {\n      const parsedHosts = HostUtils.getHosts(this.host, host);\n\n      this.updateMeeting(parsedHosts.current);\n      this.parsedLocus.host = parsedHosts.current;\n      if (parsedHosts.updates.isNewHost) {\n        this.compareAndUpdateFlags.compareSelfAndHost = true;\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateHostInfo'\n          },\n          EVENTS.LOCUS_INFO_UPDATE_HOST,\n          {\n            newHost: parsedHosts.current,\n            oldHost: parsedHosts.previous\n          }\n        );\n      }\n      this.host = host;\n    }\n    else {\n      this.compareAndUpdateFlags.compareSelfAndHost = false;\n    }\n  }\n\n  /**\n   * @param {Object} info\n   * @param {Object} self\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateMeetingInfo(info, self) {\n    if (info && (!isEqual(this.info, info) ||\n    !isEqual(InfoUtils.parsePolicy(info), InfoUtils.parsePolicy(this.info)) ||\n    !isEqual(InfoUtils.parseModerator(info) || InfoUtils.parseModerator(info)))) {\n      const parsedInfo = InfoUtils.getInfos(this.parsedLocus.info, info);\n\n      this.emitScoped(\n        {\n          file: 'locus-info',\n          function: 'updateMeetingInfo'\n        },\n        LOCUSINFO.EVENTS.MEETING_INFO_UPDATED,\n        {info: parsedInfo.current, self}\n      );\n\n      if (parsedInfo.updates.isLocked) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateMeetingInfo'\n          },\n          LOCUSINFO.EVENTS.MEETING_LOCKED,\n          info\n        );\n      }\n      if (parsedInfo.updates.isUnlocked) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateMeetingInfo'\n          },\n          LOCUSINFO.EVENTS.MEETING_UNLOCKED,\n          info\n        );\n      }\n\n      this.info = info;\n      this.parsedLocus.info = parsedInfo.current;\n      // Parses the info and adds necessary values\n      this.updateMeeting(parsedInfo.current);\n    }\n  }\n\n  /**\n   * handles when the locus.mediaShares is updated\n   * @param {Object} mediaShares the locus.mediaShares property\n   * @returns {undefined}\n   * @memberof LocusInfo\n   * emits internal event locus_info_update_media_shares\n   */\n  updateMediaShares(mediaShares) {\n    if (mediaShares && !isEqual(this.mediaShares, mediaShares)) {\n      const parsedMediaShares = MediaSharesUtils.getMediaShares(this.mediaShares, mediaShares);\n\n      this.updateMeeting(parsedMediaShares.current);\n      this.emitScoped(\n        {\n          file: 'locus-info',\n          function: 'updateMediaShares'\n        },\n        EVENTS.LOCUS_INFO_UPDATE_MEDIA_SHARES,\n        {\n          current: parsedMediaShares.current,\n          previous: parsedMediaShares.previous\n        }\n      );\n      this.parsedLocus.mediaShares = parsedMediaShares.current;\n      this.mediaShares = mediaShares;\n    }\n  }\n\n  /**\n   * @param {String} participantsUrl\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateParticipantsUrl(participantsUrl) {\n    if (participantsUrl && !isEqual(this.participantsUrl, participantsUrl)) {\n      this.participantsUrl = participantsUrl;\n    }\n  }\n\n  /**\n   * @param {Object} replace\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateReplace(replace) {\n    if (replace && !isEqual(this.replace, replace)) {\n      this.replace = replace;\n    }\n  }\n\n  /**\n   * handles when the locus.self is updated\n   * @param {Object} self the locus.mediaShares property\n   * @param {Array} participants the locus.participants property\n   * @returns {undefined}\n   * @memberof LocusInfo\n   * emits internal events self_admitted_guest, self_unadmitted_guest, locus_info_update_self\n   */\n  updateSelf(self, participants) {\n    if (self && !isEqual(this.self, self)) {\n      const parsedSelves = SelfUtils.getSelves(this.self, self, this.webex.internal.device.url);\n\n      this.updateMeeting(parsedSelves.current);\n      this.parsedLocus.self = parsedSelves.current;\n\n      const element = this.parsedLocus.states[this.parsedLocus.states.length - 1];\n\n      if (element !== parsedSelves.current.state) {\n        this.parsedLocus.states.push(parsedSelves.current.state);\n      }\n\n      // TODO: check if we need to save the sipUri here as well\n      // this.emit(LOCUSINFO.EVENTS.MEETING_UPDATE, SelfUtils.getSipUrl(this.getLocusPartner(participants, self), this.parsedLocus.fullState.type, this.parsedLocus.info.sipUri));\n      const result = SelfUtils.getSipUrl(this.getLocusPartner(participants, self), this.parsedLocus.fullState.type, this.parsedLocus.info.sipUri);\n\n      if (result.sipUri) {\n        this.updateMeeting(result);\n      }\n      if (parsedSelves.updates.moderatorChanged) {\n        this.compareAndUpdateFlags.compareHostAndSelf = true;\n      }\n      else {\n        this.compareAndUpdateFlags.compareHostAndSelf = false;\n      }\n\n      if (parsedSelves.updates.isMediaInactiveOrReleased) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateSelf'\n          },\n          LOCUSINFO.EVENTS.DISCONNECT_DUE_TO_INACTIVITY,\n          {reason: self.reason}\n        );\n      }\n\n      if (parsedSelves.updates.moderatorChanged) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateSelf'\n          },\n          LOCUSINFO.EVENTS.SELF_MODERATOR_CHANGED,\n          self\n        );\n      }\n      if (parsedSelves.updates.isMutedByOthers) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateSelf'\n          },\n          LOCUSINFO.EVENTS.SELF_MUTED_BY_OTHERS,\n          self\n        );\n      }\n      if (parsedSelves.updates.isUnadmittedGuest) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateSelf'\n          },\n          LOCUSINFO.EVENTS.SELF_UNADMITTED_GUEST,\n          self\n        );\n      }\n      if (parsedSelves.updates.isAdmittedGuest) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateSelf'\n          },\n          LOCUSINFO.EVENTS.SELF_ADMITTED_GUEST,\n          self\n        );\n      }\n\n      if (parsedSelves.updates.isMediaInactive) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateSelf'\n          },\n          LOCUSINFO.EVENTS.MEDIA_INACTIVITY,\n          SelfUtils.getMediaStatus(self.mediaSessions)\n        );\n      }\n\n\n      this.emitScoped(\n        {\n          file: 'locus-info',\n          function: 'updateSelf'\n        },\n        EVENTS.LOCUS_INFO_UPDATE_SELF,\n        {\n          oldSelf: parsedSelves.previous,\n          newSelf: parsedSelves.current\n        }\n      );\n      this.parsedLocus.self = parsedSelves.current;\n      this.self = self;\n    }\n    else {\n      this.compareAndUpdateFlags.compareHostAndSelf = false;\n    }\n  }\n\n  /**\n   * handles when the locus.url is updated\n   * @param {String} url\n   * @returns {undefined}\n   * emits internal event locus_info_update_url\n   */\n  updateLocusUrl(url) {\n    if (url && this.url !== url) {\n      this.url = url;\n      this.updateMeeting({locusUrl: url});\n      this.emitScoped(\n        {\n          file: 'locus-info',\n          function: 'updateLocusUrl'\n        },\n        EVENTS.LOCUS_INFO_UPDATE_URL,\n        url\n      );\n    }\n  }\n\n  /**\n   * @param {String} aclUrl\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateAclUrl(aclUrl) {\n    if (aclUrl && !isEqual(this.aclUrl, aclUrl)) {\n      this.aclUrl = aclUrl;\n    }\n  }\n\n  /**\n   * @param {Number} baseSequence\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateBasequence(baseSequence) {\n    if (baseSequence && !isEqual(this.baseSequence, baseSequence)) {\n      this.baseSequence = baseSequence;\n    }\n  }\n\n  /**\n   * @param {Number} sequence\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateSequence(sequence) {\n    if (sequence && !isEqual(this.sequence, sequence)) {\n      this.sequence = sequence;\n    }\n  }\n\n  /**\n   * @param {Object} membership\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateMemberShip(membership) {\n    if (membership && !isEqual(this.membership, membership)) {\n      this.membership = membership;\n    }\n  }\n\n  /**\n   * @param {Array} identities\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateIdentifiers(identities) {\n    if (identities && !isEqual(this.identities, identities)) {\n      this.identities = identities;\n    }\n  }\n}\n"]}