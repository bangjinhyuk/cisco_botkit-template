{"version":3,"sources":["index.js"],"names":["logRequest","request","header","success","failure","LoggerProxy","logger","info","then","arg","catch","error","Meeting","attrs","options","namespace","MEETINGS","getMediaStreams","mediaDirection","audioVideo","VIDEO_RESOLUTIONS","mediaProperties","localQualityLevel","sharePreferences","sendAudio","sendVideo","sendShare","bowser","safari","warn","video","deviceId","preferredVideoDevice","lastVideoDeviceId","getVideoDeviceId","setVideoDeviceId","Media","getSupportedDevice","reject","MediaError","devicePermissions","getUserMedia","isSharing","config","metricName","METRICS_OPERATIONAL_MEASURES","GET_USER_MEDIA_FAILURE","data","correlation_id","correlationId","locus_id","locusUrl","split","pop","reason","message","metadata","type","name","Metrics","sendOperationalMetric","getSupportedDevices","getDevices","id","uuid","v4","userId","orgId","resource","deviceUrl","roapSeq","ROAP_SEQ_PRE","meetingInfo","members","Members","locus","url","parent","webex","roap","Roap","reconnectionManager","ReconnectionManager","audio","meetingFiniteStateMachine","MeetingStateMachine","create","stats","internalStats","conversationUrl","sipUri","partner","owner","hostId","policy","meetingRequest","MeetingRequest","MediaProperties","inMeetingActions","InMeetingActions","callEvents","floorGrantPending","mediaQualityMetrics","statsAnalyzer","mqaProcessor","networkStatus","locusInfo","LocusInfo","updateMeetingObject","bind","recording","setUpLocusInfoListeners","init","setUpLocusInfoSelfListener","setUpLocusInfoMeetingListener","setUpLocusFullStateListener","setUpLocusUrlListener","setUpLocusHostListener","setUpLocusSelfListener","setUpLocusParticipantsListener","setupLocusControlsListener","setUpLocusMediaSharesListener","setUpLocusInfoMeetingInfoListener","setUpLocusInfoAssignHostListener","setUpLocusInfoMediaInactiveListener","on","EVENTS","DISCONNECT_DUE_TO_INACTIVITY","res","reconnect","LOCUS_INFO_CAN_ASSIGN_HOST","payload","Trigger","trigger","file","function","EVENT_TRIGGERS","MEETING_ACTIONS_UPDATE","canAssignHost","canLock","getCanLock","canUnlock","getCanUnlock","setCanAssignHost","LOCUSINFO","FULL_STATE_MEETING_STATE_CHANGE","MEETING_STATE_CHANGE","FULL_STATE_TYPE_UPDATE","locusFullStateTypeUpdate","event","trackingId","identifiers","locusId","locusStartTime","fullState","lastActive","MQA_STATS","CA_TYPE","initMediaPayload","initPayload","getAnalyzerMetricsPrePayload","internal","metrics","submitCallDiagnosticEvents","clientType","subClientType","NETWORK_STATUS","DISCONNECTED","MEETINGS_NETWORK_DISCONNECTED","CONNECTED","MEETINGS_NETWORK_CONNECTED","LOCUS_INFO_UPDATE_SELF","locusSelfUpdate","newSelf","state","MEETING_STATE","STATES","JOINED","share","LOCUS_INFO_UPDATE_HOST","locusHostUpdate","LOCUS_INFO_UPDATE_PARTICIPANTS","locusParticipantsUpdate","CONTROLS_RECORDING_UPDATED","modifiedBy","lastModified","RECORDING_STATE","RECORDING","MEETING_STARTED_RECORDING","IDLE","MEETING_STOPPED_RECORDING","PAUSED","MEETING_PAUSED_RECORDING","RESUMED","MEETING_RESUMED_RECORDING","LOCUS_INFO_UPDATE_MEDIA_SHARES","current","contentId","disposition","selfId","FLOOR_ACTION","RELEASED","updateShare","receiveShare","finally","MEETING_STARTED_SHARING_REMOTE","GRANTED","MEETING_STOPPED_SHARING_REMOTE","locusMediaSharesUpdate","LOCUS_INFO_UPDATE_URL","locusUrlUpdate","MEETING_LOCKED","MEETING_UNLOCKED","MEETING_INFO_UPDATED","newCanLock","newCanUnlock","self","moderator","MeetingUtil","canUserLock","canUserUnlock","getCanAssignHost","setCanLock","setCanUnlock","SELF_MUTED_BY_OTHERS","MEETING_SELF_MUTED_BY_OTHERS","SELF_UNADMITTED_GUEST","MEETING_SELF_LOBBY_WAITING","postEvent","eventType","LOBBY_ENTERED","meeting","SELF_ADMITTED_GUEST","MEETING_SELF_GUEST_ADMITTED","LOBBY_EXITED","MEDIA_INACTIVITY","REMOTE_ANSWERED_DECLINED","remote","DESTROY_MEETING","wirelessShare","shareTrack","onended","stop","shouldLeave","leave","cleanUp","meetingId","object","length","forEach","key","invitee","alertIfActive","addMember","memberIds","admitMembers","memberId","removeMember","mute","muteMember","transferHostToMember","mqaInterval","clearInterval","automaticMetrics","StatsMetrics","getStats","initialize","setStats","setInterval","processMQAData","mqaMetricsInterval","MQAProcessor","DATA_PLACEMENTS","sendRecvData","toLowerCase","endsWith","STATS","SENDER","getSender","RECEIVER","getReceiver","mqa","getMQA","interval","getSlice","process","override","createStats","log","StatsUtil","generateOptions","CONFIG","WebRTCStats","destroySenders","destroyReceivers","isMuted","isSelf","body","errors","setSipUri","sipMeetingUri","setLocus","participants","getLocusPartner","_CALL_","person","sipUrl","emailAddress","email","seq","mtgLocus","mediaConnections","mediaId","host","initialSetup","pc","ontrack","MEDIA_ID","AUDIO_TRACK","VIDEO_TRACK","SHARE_TRACK","mediaTrack","track","trackMediaID","transceiver","mid","target","audioTransceiver","videoTransceiver","shareTransceiver","receiver","EVENT_TYPES","REMOTE_AUDIO","setRemoteAudioTrack","REMOTE_VIDEO","setRemoteVideoTrack","REMOTE_SHARE","setRemoteShare","MEDIA_READY","stream","MediaUtil","createMediaStream","unsetRemoteMedia","unsetRemoteTracks","closeRemoteTracks","remoteAudioTrack","remoteVideoTrack","remoteShare","triggerMediaStoppedEvent","mediaType","MEDIA_STOPPED","stopTrack","stopTracks","isTrackStopped","readyState","ENDED","isWrongReadyState","all","localStream","getTrack","audioTrack","videoTrack","settings","getSettings","setMediaSettings","echoCancellation","noiseSuppression","mediaSettings","setLocalAudioTrack","setLocalVideoTrack","aspectRatio","frameRate","height","width","LOCAL","localShare","setLocalShareTrack","contentTracks","displaySurface","cursor","screen","MEETING_REMOVED_REASON","USER_ENDED_SHARE_STREAMS","stopShare","LOCAL_SHARE","audioStopped","videoStopped","unsetLocalVideoTrack","unsetLocalShareTrack","mercury","ONLINE","PeerConnectionManager","close","peerConnection","unsetPeerConnection","reconnection","detection","off","toggle","ParameterError","LOG_HEADER","MUTED","USER_INTERACTION","AUDIO","UNMUTED","VIDEO","joinOptions","audioVideoOptions","join","joinResponse","addMedia","mediaResponse","media","local","validate","ReconnectInProgress","resolve","MEETING_RECONNECTION_STARTING","MEETING_RECONNECTION_SUCCESS","MEETING_RECONNECTION_FAILURE","ReconnectionError","reset","CALL_INITIATED","pstnAudioType","MEETING_STATE_MACHINE","RINGING","ring","_JOIN_","resourceId","destination","meetingQuality","QUALITY_LEVELS","errorMessage","Error","setLocalQualityLevel","setRemoteQualityLevel","joinMeetingOptions","fail","mediaCapabilities","rx","share_audio","whiteboard","tx","moveMedia","moveToResource","updateMedia","receiveVideo","receiveAudio","oldCorrelationId","meetings","meetingCollection","set","leaveMeeting","moveMeeting","delete","isGuestUnjoined","guest","MEDIA_CAPABILITIES","validateOptions","setMediaPeerConnection","createPeerConnection","setReconnectListener","setPeerConnectionEvents","preMedia","attachMedia","remoteQualityLevel","setRemoteStream","startInternalStats","autoSendMQA","startMediaQualityMetrics","enableStatsAnalyzer","StatsAnalyzer","MEDIA_QUALITY","intervalData","MEETING_HIGH_PACKETLOSS","autoDowngradeEnabled","canUpdateMedia","HIGH","setLocalVideoQuality","MEDIUM","LOW","packetLossRatio","startAnalyzer","err","timerCount","joiningTimer","meetingState","FULL_STATE","ACTIVE","sendRoapMediaRequest","sdp","signalingState","SDP","STABLE","previousSendShareStatus","setContentSlides","checkForStopShare","startShare","previousMediaDirection","sendTrack","receiveTrack","updateTransceiver","setLocalTracks","AudioStateMachine","VideoStateMachine","previousShareStatus","setMediaDirection","_INCOMING_","acknowledgeMeeting","response","ALERT_DISPLAYED","_BUSY_","declineMeeting","decline","LEAVE","canProceed","leaveReason","CLIENT_LEAVE_REQUEST","content","mediaShares","find","element","CONTENT","SHARE_INITIATED","changeMeetingFloor","personUrl","uri","resourceUrl","MEETING_STARTED_SHARING_LOCAL","LOCAL_SHARE_FLOOR_GRANTED","e","SHARE_STOPPED","MEETING_STOPPED_SHARING_LOCAL","SHARE_STOPPED_REASON","SELF_STOPPED","startRecording","stopRecording","pauseRecording","resumeRecording","lockMeeting","unlockMeeting","tones","enableDTMF","sendDTMF","layoutType","LAYOUT_TYPES","includes","changeVideoLayout","onFullLocus","level","updateVideo","previousLevel","shareConstraints","getDisplayMedia","shareStream","GET_DISPLAY_MEDIA_FAILURE","StatelessWebexPlugin"],"mappings":"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","file":"index.js","sourcesContent":["import uuid from 'uuid';\nimport bowser from 'bowser';\nimport {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport StatsAnalyzer from '../statsAnalyzer';\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport Trigger from '../common/events/trigger-proxy';\nimport Roap from '../roap/index';\nimport Media from '../media';\nimport MediaProperties from '../media/properties';\nimport MeetingStateMachine from '../meeting/state';\nimport AudioStateMachine from '../meeting/audio';\nimport VideoStateMachine from '../meeting/video';\nimport LocusInfo from '../locus-info';\nimport PeerConnectionManager from '../peer-connection-manager';\nimport Metrics from '../metrics';\nimport {trigger, mediaType, eventType} from '../metrics/config';\nimport ReconnectionManager from '../reconnection-manager';\nimport MeetingRequest from '../meeting/request';\nimport Members from '../members/index';\nimport MeetingUtil from '../meeting/util';\nimport MediaUtil from '../media/util';\nimport WebRTCStats from '../stats/index';\nimport StatsMetrics from '../stats/metrics';\nimport StatsUtil from '../stats/util';\nimport ReconnectionError from '../common/errors/reconnection';\nimport ReconnectInProgress from '../common/errors/reconnection-in-progress';\nimport {\n  MEETINGS,\n  ENDED,\n  EVENT_TRIGGERS,\n  EVENT_TYPES,\n  EVENTS,\n  FLOOR_ACTION,\n  _BUSY_,\n  _INCOMING_,\n  ONLINE,\n  _CALL_,\n  CONTENT,\n  ROAP_SEQ_PRE,\n  LOCUSINFO,\n  MEETING_STATE_MACHINE,\n  _JOIN_,\n  STATS,\n  MQA_STATS,\n  MEETING_STATE,\n  METRICS_OPERATIONAL_MEASURES,\n  FULL_STATE,\n  MEETING_REMOVED_REASON,\n  SHARE_STOPPED_REASON,\n  SDP,\n  QUALITY_LEVELS,\n  VIDEO_RESOLUTIONS,\n  VIDEO,\n  LAYOUT_TYPES,\n  NETWORK_STATUS,\n  RECORDING_STATE\n} from '../constants';\nimport ParameterError from '../common/errors/parameter';\nimport MediaError from '../common/errors/media';\nimport MQAProcessor from '../metrics/mqa-processor';\n\nimport InMeetingActions from './in-meeting-actions';\n\nconst logRequest = (request, {header = '', success = '', failure = ''}) => {\n  LoggerProxy.logger.info(header);\n\n  return request\n    .then((arg) => {\n      LoggerProxy.logger.info(success);\n\n      return arg;\n    })\n    .catch((error) => {\n      LoggerProxy.logger.error(failure, error);\n      throw error;\n    });\n};\n\n/**\n * MediaDirection\n * @typedef {Object} MediaDirection\n * @property {boolean} sendAudio\n * @property {boolean} receiveAudio\n * @property {boolean} sendVideo\n * @property {boolean} receiveVideo\n * @property {boolean} sendShare\n * @property {boolean} receiveShare\n * @property {boolean} isSharing\n */\n\n/**\n  * AudioVideo\n  * @typedef {Object} AudioVideo\n  * @property {Object} audio\n  * @property {String} audio.deviceId\n  * @property {Object} video\n  * @property {String} video.deviceId\n  */\n\n/**\n   * SharePreferences\n   * @typedef {Object} SharePreferences\n   * @property {Object} [shareConstraints]\n   * @property {Boolean} [highFrameRate]\n   */\n\n/**\n * JoinOptions\n * @typedef {Object} JoinOptions\n * @property {String} [resourceId]\n * @property {String} [pin]\n * @property {Boolean} [moderator]\n * @property {String|Object} [meetingQuality]\n * @property {String} [meetingQuality.local]\n * @property {String} [meetingQuality.remote]\n */\n\n/**\n * SendOptions\n * @typedef {Object} SendOptions\n * @property {Boolean} sendAudio\n * @property {Boolean} sendVideo\n * @property {Boolean} sendShare\n */\n\n/**\n * Recording\n * @typedef {Object} Recording\n * @property {Object} state\n * @property {String} modifiedBy\n */\n\n/**\n  * Meeting State Change Event\n  * Emitted when ever there is a meeting state change\n  * @event meeting:stateChange\n  * @instance\n  * @type {Object}\n  * @property {String} currentState current state of the meeting\n  * @property {String} previousState previous state of the meeting\n  * @memberof Meeting\n  */\n\n/**\n  * Media Ready Event\n  * Emitted when a stream is ready to be rendered\n  * @event media:ready\n  * @instance\n  * @type {Object}\n  * @property {MediaStream} stream the media stream\n  * @property {String} type what type of stream, remote, local\n  * @memberof Meeting\n  */\n\n/**\n  * Media Stopped Event\n  * Emitted when a stream has stopped sending\n  * @event media:stopped\n  * @instance\n  * @type {Object}\n  * @property {String} type what type of stream, remote, local\n  * @memberof Meeting\n  */\n\n/**\n * Meeting Ringing Event\n * Emitted when this client should play a ringing sound, because this member is getting an incoming meeting\n * or sending out an incoming meeting\n * @event meeting:ringing\n * @instance\n * @type {Object}\n * @property {String} type // INCOMING or JOIN\n * @property {String} id\n * @memberof Meeting\n */\n\n/**\n * Meeting Ringing Stop Event\n * Emitted when this client should stop playing a ringing sound\n * @event meeting:ringingStop\n * @instance\n * @type {Object}\n * @property {Object} type\n * @property {Boolean} type.remoteAnswered\n * @property {Boolean} type.remoteDeclined\n * @property {String} id\n * @memberof Meeting\n */\n\n/**\n * Meeting Started Sharing Local Event\n * Emitted when this member starts sharing\n * @event meeting:startedSharingLocal\n * @instance\n * @type {Object}\n * @memberof Meeting\n */\n\n/**\n * Meeting Stopped Sharing Local Event\n * Emitted when this member stops sharing\n * @event meeting:stoppedSharingLocal\n * @instance\n * @type {Object}\n * @memberof Meeting\n */\n\n/**\n * Meeting Locked Event\n * Emitted when a meeting is locked\n * @event meeting:locked\n * @instance\n * @type {Object}\n * @property {Object} info\n * @memberof Meeting\n */\n\n/**\n * Meeting Unlocked Event\n * Emitted when a meeting is unlocked\n * @event meeting:unlocked\n * @instance\n * @type {Object}\n * @property {Object} info\n * @memberof Meeting\n */\n\n/**\n * Meeting Actions Update Event\n * Emitted when a user can take actions on a meeting such as lock, unlock, assign host\n * @event meeting:actionsUpdate\n * @instance\n * @type {Object}\n * @property {Boolean} canLock\n * @property {Boolean} canUnlock\n * @property {Boolean} canAssignHost\n * @memberof Meeting\n */\n\n/**\n * Meeting Muted By Others Event\n * Emitted when a member is muted by another member\n * @event meeting:self:mutedByOthers\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n/**\n * Meeting Self Guest Admitted Event\n * Emitted when a member admitted to the meeting by another member\n * @event meeting:self:guestAdmitted\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n/**\n * Meeting Self Lobby Waiting Event\n * Emitted when this member enters the lobby and is waiting for the webex meeting to begin\n * @event meeting:self:lobbyWaiting\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n/**\n  * Reconnection Starting Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionStarting\n  * @instance\n  * @memberof Meeting\n  */\n\n/**\n  * Reconnection Success Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionSuccess\n  * @instance\n  * @type {Object}\n  * @property {Object} reconnect\n  * @memberof Meeting\n  */\n\n/**\n  * Reconnection Failure Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionFailure\n  * @instance\n  * @type {Object}\n  * @property {Error} error\n  * @memberof Meeting\n  */\n\n/**\n  * Meeting High Packet Loss Event\n  * Emitted when ever there is high packet loss detected\n  * @event meeting:highPacketLoss\n  * @type {Object}\n  * @property {String} mediaType Type of media experiencing packet loss\n  * @property {Number} packetLossRatio current packet loss ratio\n  * @memberof Meeting\n  */\n\n/**\n * @description Meeting is the crux of the plugin\n * @export\n * @class Meeting\n */\nexport default class Meeting extends StatelessWebexPlugin {\n  namespace = MEETINGS;\n\n  /**\n   * @param {Object} attrs\n   * @param {Object} options\n   * @constructor\n   * @memberof Meeting\n  */\n  constructor(attrs, options) {\n    super({}, options);\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.attrs = attrs;\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.options = options;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.id = uuid.v4();\n    this.correlationId = this.id;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.userId = attrs.userId;\n    /**\n     * Organization ID\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.orgId = attrs.orgId;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.resource = attrs.resource;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.deviceUrl = attrs.deviceUrl;\n    /**\n     * @description set you -1 as default values is 0 (used to idenfify if 1st roap request was sent)\n     * @instance\n     * @type {Number}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.roapSeq = ROAP_SEQ_PRE;\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    // TODO: needs to be defined as a class\n    this.meetingInfo = {};\n    /**\n     * @instance\n     * @type {Members}\n     * @public\n     * @memberof Meeting\n     */\n    this.members = new Members({locusUrl: (attrs.locus && attrs.locus.url)}, {parent: this.webex});\n    /**\n     * @instance\n     * @type {Roap}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.roap = new Roap({}, {parent: this.webex});\n    /**\n     * created later\n     * @instance\n     * @type {ReconnectionManager}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.reconnectionManager = new ReconnectionManager(this);\n    /**\n     * created later\n     * @instance\n     * @type {AudioStateMachine}\n     * @public\n     * @memberof Meeting\n     */\n    this.audio = null;\n    /**\n     * created later\n     * @instance\n     * @type {VideoStateMachine}\n     * @public\n     * @memberof Meeting\n     */\n    this.video = null;\n    /**\n     * @instance\n     * @type {MeetingStateMachine}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.meetingFiniteStateMachine = MeetingStateMachine.create(this);\n    /**\n     * @instance\n     * @type {WebRTCStats}\n     * @public\n     * @memberof Meeting\n     */\n    this.stats = null;\n    /**\n     * @instance\n     * @type {WebRTCStats}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.internalStats = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.conversationUrl = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.locusUrl = (attrs.locus && attrs.locus.url) || null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.sipUri = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.partner = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.type = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.owner = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.hostId = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.policy = null;\n    /**\n     * @instance\n     * @type {MeetingRequest}\n     * @private\n     * @memberof Meeting\n     */\n    this.meetingRequest = new MeetingRequest({}, options);\n\n    /**\n     * Passing only info as we send basic info for meeting added event\n     * @instance\n     * @type {MediaProperties}\n     * @public\n     * @memberof Meeting\n     */\n    this.mediaProperties = new MediaProperties();\n    /**\n     * @instance\n     * @type {InMeetingActions}\n     * @public\n     * @memberof Meeting\n    */\n    this.inMeetingActions = new InMeetingActions();\n    /**\n     * @instance\n     * @type {Boolean}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.isSharing = false;\n    /**\n     * @instance\n     * @type {Array}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.callEvents = [];\n    /**\n     * There is a pending floor requested by the user\n     * @instance\n     * @type {floorGrantPending}\n     * @private\n     * @memberof Meeting\n     */\n    this.floorGrantPending = false;\n    /**\n     * @instance\n     * @type {MediaMetrics}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.mediaQualityMetrics = null;\n    /**\n     * @instance\n     * @type {StatsAnalyzer}\n     * @private\n     * @memberof Meeting\n     */\n    this.statsAnalyzer = null;\n    /**\n     * @instance\n     * @type {MQAProcessor}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.mqaProcessor = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.networkStatus = null;\n    /**\n     * Passing only info as we send basic info for meeting added event\n     * @instance\n     * @type {MeetingRequest}\n     * @private\n     * @memberof Meeting\n     */\n    this.locusInfo = new LocusInfo(this.updateMeetingObject.bind(this), this.webex, this.id);\n    // We had to add listeners first before setting up the locus instance\n    /**\n     * @instance\n     * @type {Recording}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.recording = null;\n\n    this.setUpLocusInfoListeners();\n    this.locusInfo.init(attrs.locus ? attrs.locus : {});\n  }\n\n  /**\n   * Proxy function for all the listener set ups\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoListeners() {\n    // meeting update listeners\n    this.setUpLocusInfoSelfListener();\n    this.setUpLocusInfoMeetingListener();\n    // members update listeners\n    this.setUpLocusFullStateListener();\n    this.setUpLocusUrlListener();\n    this.setUpLocusHostListener();\n    this.setUpLocusSelfListener();\n    this.setUpLocusParticipantsListener();\n    this.setupLocusControlsListener();\n    this.setUpLocusMediaSharesListener();\n    this.setUpLocusInfoMeetingInfoListener();\n    this.setUpLocusInfoAssignHostListener();\n    this.setUpLocusInfoMediaInactiveListener();\n  }\n\n\n  /**\n   * Set up the locus info listener for meetings disconnected due to inactivity\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoMediaInactiveListener() {\n    this.locusInfo.on(EVENTS.DISCONNECT_DUE_TO_INACTIVITY, (res) => {\n      // TODO: need to send metric for locus disconnect\n      LoggerProxy.logger.error(`Meeting:index#setUpLocusInfoMediaInactiveListener --> Meeting disconnected due to inactivity: ${res.reason}`);\n      this.reconnect();\n    });\n  }\n\n  /**\n   * Set up the locus info listener for assign host permissions on a meeting\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoAssignHostListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_CAN_ASSIGN_HOST, (payload) => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setUpLocusInfoAssignHostListener'\n        },\n        EVENT_TRIGGERS.MEETING_ACTIONS_UPDATE,\n        {\n          canAssignHost: payload.canAssignHost,\n          canLock: this.inMeetingActions.getCanLock(),\n          canUnlock: this.inMeetingActions.getCanUnlock()\n        }\n      );\n      this.inMeetingActions.setCanAssignHost(payload.canAssignHost);\n    });\n  }\n\n  /**\n   * Set up the internal locus info full state object listener\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusFullStateListener() {\n    this.locusInfo.on(LOCUSINFO.EVENTS.FULL_STATE_MEETING_STATE_CHANGE, (payload) => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setUpLocusFullStateListener'\n        },\n        EVENT_TRIGGERS.MEETING_STATE_CHANGE,\n        {\n          payload\n        }\n      );\n    });\n\n    this.locusInfo.on(LOCUSINFO.EVENTS.FULL_STATE_TYPE_UPDATE, (payload) => {\n      this.members.locusFullStateTypeUpdate(payload);\n    });\n  }\n\n  /**\n   * get the metrics payload pre\n   * @param {Object} options\n   * @param {String} options.event\n   * @param {String} options.trackingId\n   * @param {Object} options.locus\n   * @returns {Object}\n   * @memberof Meeting\n   */\n  getAnalyzerMetricsPrePayload(options) {\n    if (options) {\n      const {event, trackingId, locus} = options;\n\n      if (!event) {\n        LoggerProxy.logger.error('Meeting:index#getAnalyzerMetricsPrePayload --> Error [Call Analyzer Event', event || '', `]: invalid identifers or event type! ${this.correlationId}`);\n\n        return null;\n      }\n\n      const identifiers = {\n        correlationId: this.correlationId,\n        userId: this.userId,\n        deviceId: this.deviceUrl,\n        orgId: this.orgId\n      };\n\n      // If locus is passed take the value from there else use meeting object\n      if (locus) {\n        identifiers.locusId = locus.url.split('/').pop();\n        identifiers.locusStartTime = locus.fullState.lastActive;\n      }\n      else if (this.locusUrl && this.locusInfo.fullState) {\n        identifiers.locusId = this.locusUrl && this.locusUrl.split('/').pop();\n        identifiers.locusStartTime = this.locusInfo.fullState && this.locusInfo.fullState.lastActive;\n      }\n\n      if (options.trackingId) {\n        identifiers.trackingId = trackingId;\n      }\n\n      let payload = {};\n\n      if (options.type === MQA_STATS.CA_TYPE) {\n        payload = Metrics.initMediaPayload(options.event, identifiers, options);\n      }\n\n      else {\n        payload = Metrics.initPayload(options.event, identifiers, options);\n      }\n\n      return payload;\n    }\n\n    return null;\n  }\n\n  /**\n   * Send the metrics to call-analyzer dashboard\n   * @param {Object} options\n   * @param {String} options.event\n   * @param {String} options.trackingId\n   * @param {Object} options.locus\n   * @returns {Promise}\n   * @private\n   * @memberof Meeting\n   */\n  sendCallAnalyzerMetrics(options) {\n    const payload = this.getAnalyzerMetricsPrePayload(options);\n\n    return this.webex.internal.metrics.submitCallDiagnosticEvents(payload);\n  }\n\n  /**\n   * Send the metrics to Media Quality Analyzer dashboard\n   * @param {Object} options\n   * @param {String} options.event\n   * @param {String} options.trackingId\n   * @param {Object} options.locus\n   * @returns {Promise}\n   * @private\n   * @memberof Meeting\n   */\n  sendMediaQualityAnalyzerMetrics(options) {\n    options.type = MQA_STATS.CA_TYPE;\n    options.clientType = this.config.metrics.clientType;\n    options.subClientType = this.config.metrics.subClientType;\n    const payload = this.getAnalyzerMetricsPrePayload(options);\n\n    return this.webex.internal.metrics.submitCallDiagnosticEvents(payload);\n  }\n\n  /**\n   * sets the network status on meeting object\n   * @param {String} networkStatus\n   * @private\n   * @returns {undefined}\n   * @memberof Meeting\n   */\n  setNetworkStatus(networkStatus) {\n    if (networkStatus === NETWORK_STATUS.DISCONNECTED) {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setNetworkStatus'\n        },\n        EVENT_TRIGGERS.MEETINGS_NETWORK_DISCONNECTED,\n      );\n    }\n    else if (networkStatus === NETWORK_STATUS.CONNECTED && this.networkStatus === NETWORK_STATUS.DISCONNECTED) {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setNetworkStatus'\n        },\n        EVENT_TRIGGERS.MEETINGS_NETWORK_CONNECTED,\n      );\n    }\n\n    this.networkStatus = networkStatus;\n  }\n\n  /**\n   * Set up the locus info self listener\n   * update self value for members and updates the member\n   * notifies consumer with members:self:update {activeSelfId endedSelfId}\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusSelfListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_SELF, (payload) => {\n      this.members.locusSelfUpdate(payload);\n\n      // If user moved to a JOINED state and there is a pending floor grant trigger it\n      if (this.floorGrantPending && payload.newSelf.state === MEETING_STATE.STATES.JOINED) {\n        this.share()\n          .then(() => { this.floorGrantPending = false; });\n      }\n    });\n  }\n\n  /**\n   * Set up the locus info host listener\n   * update host value for members and updates the member\n   * notifies consumer with members:host:update: {activeHostId, endedHostId}\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusHostListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_HOST, (payload) => {\n      this.members.locusHostUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info participants update listener\n   * update members collection value for members\n   * notifies consumer with members:update\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusParticipantsListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_PARTICIPANTS, (payload) => {\n      this.members.locusParticipantsUpdate(payload);\n    });\n  }\n\n\n  /**\n   * Set up the locus info recording update listener\n   * update recording value for the meeting\n   * notifies consumer with:\n   *  meeting:recording:started\n   *  meeting:recording:stopped\n   *  meeting:recording:paused\n   *  meeting:recording:resumed\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setupLocusControlsListener() {\n    this.locusInfo.on(LOCUSINFO.EVENTS.CONTROLS_RECORDING_UPDATED,\n      ({state, modifiedBy, lastModified}) => {\n        let event;\n\n        switch (state) {\n          case RECORDING_STATE.RECORDING:\n            event = EVENT_TRIGGERS.MEETING_STARTED_RECORDING;\n            break;\n          case RECORDING_STATE.IDLE:\n            event = EVENT_TRIGGERS.MEETING_STOPPED_RECORDING;\n            break;\n          case RECORDING_STATE.PAUSED:\n            event = EVENT_TRIGGERS.MEETING_PAUSED_RECORDING;\n            break;\n          case RECORDING_STATE.RESUMED:\n            event = EVENT_TRIGGERS.MEETING_RESUMED_RECORDING;\n            break;\n          default:\n            event = null;\n            break;\n        }\n\n        // `RESUMED` state should be converted to `RECORDING` after triggering the event\n        this.recording = {\n          state: state === RECORDING_STATE.RESUMED ? RECORDING_STATE.RECORDING : state,\n          modifiedBy,\n          lastModified\n        };\n\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setupLocusControlsListener'\n          },\n          event,\n          this.recording\n        );\n      });\n  }\n\n  /**\n   * Set up the locus info media shares listener\n   * update content sharing id value for members, and updates the member\n   * notifies consumer with members:content:update {activeContentSharingId, endedContentSharingId}\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusMediaSharesListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_MEDIA_SHARES, (payload) => {\n      const {contentId, disposition} = payload.current;\n\n      // Check if screenshare is being taken over by a remote\n      // If so, terminate the share and allow the remote to be on the floor\n      // Terminating the share allows the user to screenshare again without any issues\n      if (\n        this.isSharing &&\n        this.selfId !== contentId &&\n        disposition !== FLOOR_ACTION.RELEASED\n      ) {\n        this.updateShare({\n          sendShare: false,\n          receiveShare: this.mediaProperties.mediaDirection.receiveShare\n        }).finally(() => {\n          this.isSharing = false;\n\n          // Trigger remote share start event\n          Trigger.trigger(\n            this,\n            {\n              file: 'meetings/index',\n              function: 'remoteShare'\n            },\n            EVENT_TRIGGERS.MEETING_STARTED_SHARING_REMOTE\n          );\n        });\n      }\n      // Check if remote started a share\n      else if (\n        this.selfId !== contentId &&\n        disposition === FLOOR_ACTION.GRANTED\n      ) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meetings/index',\n            function: 'remoteShare'\n          },\n          EVENT_TRIGGERS.MEETING_STARTED_SHARING_REMOTE\n        );\n      }\n      // check if remote stopped a share\n      else if (\n        this.selfId !== contentId &&\n        disposition === FLOOR_ACTION.RELEASED\n      ) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meetings/index',\n            function: 'remoteShare'\n          },\n          EVENT_TRIGGERS.MEETING_STOPPED_SHARING_REMOTE\n        );\n      }\n\n      this.members.locusMediaSharesUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info url listener\n   * update locus_url value for members\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusUrlListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_URL, (payload) => {\n      this.members.locusUrlUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info meeting info listener\n   * @returns {undefined}\n   * @private\n   * @memberof meeting\n   */\n  setUpLocusInfoMeetingInfoListener() {\n    this.locusInfo.on(LOCUSINFO.EVENTS.MEETING_LOCKED, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMeetingInfoListener'\n          },\n          EVENT_TRIGGERS.MEETING_LOCKED,\n          {\n            payload\n          }\n        );\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.MEETING_UNLOCKED, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMeetingInfoListener'\n          },\n          EVENT_TRIGGERS.MEETING_UNLOCKED,\n          {\n            payload\n          }\n        );\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.MEETING_INFO_UPDATED, (payload) => {\n      if (payload && payload.info) {\n        let newCanLock;\n        let newCanUnlock;\n\n        if (payload.self && !payload.self.moderator) {\n          newCanLock = false;\n          newCanUnlock = false;\n        }\n        else {\n          newCanLock = MeetingUtil.canUserLock(payload.info.moderator, payload.info.policy);\n          newCanUnlock = MeetingUtil.canUserUnlock(payload.info.moderator, payload.info.policy);\n        }\n\n        if (newCanLock && !this.inMeetingActions.canLock) {\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'setUpLocusInfoMeetingInfoListener'\n            },\n            EVENT_TRIGGERS.MEETING_ACTIONS_UPDATE,\n            {\n              canLock: true,\n              canUnlock: false,\n              canAssignHost: this.inMeetingActions.getCanAssignHost()\n            }\n          );\n        }\n        if (newCanUnlock && !this.inMeetingActions.canUnlock || !newCanLock) {\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'setUpLocusInfoMeetingInfoListener'\n            },\n            EVENT_TRIGGERS.MEETING_ACTIONS_UPDATE,\n            {\n              canLock: false,\n              canUnlock: true,\n              canAssignHost: this.inMeetingActions.getCanAssignHost()\n            }\n          );\n        }\n        this.inMeetingActions.setCanLock(newCanLock || false);\n        this.inMeetingActions.setCanUnlock(newCanUnlock || false);\n      }\n    });\n  }\n\n  /**\n   * Internal function to listen to the self object changes\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoSelfListener() {\n    this.locusInfo.on(LOCUSINFO.EVENTS.SELF_MUTED_BY_OTHERS, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoSelfListener'\n          },\n          EVENT_TRIGGERS.MEETING_SELF_MUTED_BY_OTHERS,\n          {\n            payload\n          }\n        );\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.SELF_UNADMITTED_GUEST, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoSelfListener'\n          },\n          EVENT_TRIGGERS.MEETING_SELF_LOBBY_WAITING,\n          {\n            payload\n          }\n        );\n\n        Metrics.postEvent({\n          event: eventType.LOBBY_ENTERED,\n          meeting: this\n        });\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.SELF_ADMITTED_GUEST, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoSelfListener'\n          },\n          EVENT_TRIGGERS.MEETING_SELF_GUEST_ADMITTED,\n          {\n            payload\n          }\n        );\n\n        Metrics.postEvent({\n          event: eventType.LOBBY_EXITED,\n          meeting: this\n        });\n      }\n    });\n\n    this.locusInfo.on(LOCUSINFO.EVENTS.MEDIA_INACTIVITY, () => {\n      this.reconnect();\n    });\n  }\n\n  /**\n   * Add LocusInfo nested object listeners (from child to parent)\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoMeetingListener() {\n    this.locusInfo.on(EVENTS.REMOTE_ANSWERED_DECLINED, (payload) => {\n      this.meetingFiniteStateMachine.remote(payload);\n    });\n    this.locusInfo.on(EVENTS.DESTROY_MEETING, (payload) => {\n      // if self state is NOT left\n\n      // TODO: Handle sharing and wireless sharing when meeting end\n      if (this.wirelessShare) {\n        if (this.mediaProperties.shareTrack) {\n          this.mediaProperties.shareTrack.onended = null;\n          this.mediaProperties.shareTrack.stop();\n        }\n      }\n      // when multiple WEB deviceType join with same user\n      // and some of the devices are joined and some are left\n      // when your own device is still connected you want to leave and destroy\n      // else you want to just destroy\n      // this looks odd because when it leaves it should destroy, but we get a\n      // leave response and we should destroy it on the next event loop\n      // the leave response gets parsed and we decide if we want to destroy the meeting\n      // the first time we just leave it, the second time it comes it destroys it from the collection\n      if (payload.shouldLeave) {\n        // TODO:  We should do cleaning of meeting object if the shouldLeave: false because there might be meeting object which we are not cleaning\n\n        this.leave({reason: payload.reason}).then(() => {\n          LoggerProxy.logger.warn('Meeting:index#setUpLocusInfoMeetingListener --> DESTROY_MEETING. The meeting has been left, but has not been destroyed, you should see a later event for leave.');\n        }).catch((error) => {\n          LoggerProxy.logger.error(`Meeting:index#setUpLocusInfoMeetingListener --> DESTROY_MEETING. Issue with leave for meeting, meeting still in collection: ${this.meeting}, error: ${error}`);\n        });\n      }\n      else {\n        LoggerProxy.logger.info('Meeting:index#setUpLocusInfoMeetingListener --> MEETING_REMOVED_REASON', payload.reason);\n        MeetingUtil.cleanUp(this);\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMeetingListener'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            reason: payload.reason,\n            meetingId: this.id\n          }\n        );\n      }\n    });\n  }\n\n  /**\n   * Set meeting values rather than events\n   * @param {Object} object\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   * // TODO: is this function necessary?\n   */\n  updateMeetingObject(object) {\n    // Validate if these are valid meeting object property\n    // TODO: add a check to make sure the value passed in the constructor\n    // is not changed by any delta event\n    if (object && Object.keys(object).length) {\n      Object.keys(object).forEach((key) => {\n        this[key] = object[key];\n      });\n    }\n  }\n\n  /**\n   * Invite a guest to the call that isn't normally part of this call\n   * @param {Object} invitee\n   * @param {String} invitee.emailAddress\n   * @param {String} invitee.email\n   * @param {Boolean} [alertIfActive]\n   * @returns {Promise} see #members.addMember\n   * @public\n   * @memberof Meeting\n   */\n  invite(invitee, alertIfActive = true) {\n    return this.members.addMember(invitee, alertIfActive);\n  }\n\n  /**\n   * Admit the guest(s) to the call once they are waiting\n   * @param {Array} memberIds\n   * @returns {Promise} see #members.admitMembers\n   * @public\n   * @memberof Meeting\n   */\n  admit(memberIds) {\n    return this.members.admitMembers(memberIds);\n  }\n\n  /**\n   * Remove the member from the meeting, boot them\n   * @param {String} memberId\n   * @returns {Promise} see #members.removeMember\n   * @public\n   * @memberof Meeting\n   */\n  remove(memberId) {\n    return this.members.removeMember(memberId);\n  }\n\n  /**\n   * Mute another member from the meeting\n   * @param {String} memberId\n   * @param {Boolean} mute\n   * @returns {Promise} see #members.muteMember\n   * @public\n   * @memberof Meeting\n   */\n  mute(memberId, mute = true) {\n    return this.members.muteMember(memberId, mute);\n  }\n\n  /**\n   * Transfer the moderator role to another eligible member\n   * @param {String} memberId\n   * @param {Boolean} moderator\n   * @returns {Promise} see #members.transferHostToMember\n   * @public\n   * @memberof Meeting\n   */\n  transfer(memberId, moderator = true) {\n    return this.members.transferHostToMember(memberId, moderator);\n  }\n\n  /**\n   * Reference to the Members object\n   * @returns {Members}\n   * @public\n   * @memberof Meeting\n   */\n  getMembers() {\n    return this.members;\n  }\n\n  /**\n   * If this gets turned off mid meeting after attaching media, it will shut down the MQA metrics and they will\n   * not restart unless the start function is called again\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  cleanMQAInterval() {\n    if (this.mqaInterval) {\n      clearInterval(this.mqaInterval);\n    }\n  }\n\n  /**\n   * Automatically publishes media metrics data and on a config interval\n   * uses the existing getStats data filter, so no new streams are created\n   * but it is separate than history, so history will not be available\n   * @returns {MediaMetrics}\n   * @public\n   * @memberof Meeting\n   */\n  startMediaQualityMetrics() {\n    const automaticMetrics = new StatsMetrics({config: this.config});\n\n    const stats = this.getStats(automaticMetrics.initialize(), true);\n\n    this.mediaQualityMetrics = automaticMetrics;\n\n    this.mediaQualityMetrics.setStats(stats);\n\n    this.mqaInterval = setInterval(() => this.processMQAData(), this.config.metrics.mqaMetricsInterval);\n\n    return automaticMetrics;\n  }\n\n  /**\n   * @private\n   * @returns {undefined}\n   * @memberof Meeting\n   */\n  processMQAData() {\n    if (!this.mqaProcessor) {\n      this.mqaProcessor = new MQAProcessor();\n    }\n\n    MQA_STATS.DATA_PLACEMENTS.forEach((key) => {\n      if (this.mediaQualityMetrics && this.mediaQualityMetrics.stats) {\n        let sendRecvData;\n\n        if (key.toLowerCase().endsWith(STATS.SENDER)) {\n          sendRecvData = this.mediaQualityMetrics.stats.getSender(key);\n        }\n        else if (key.toLowerCase().endsWith(STATS.RECEIVER)) {\n          sendRecvData = this.mediaQualityMetrics.stats.getReceiver(key);\n        }\n        let mqa;\n\n        if (sendRecvData) {\n          mqa = sendRecvData.getMQA();\n        }\n        if (mqa) {\n          const interval = mqa.getSlice(this.config.metrics.mqaMetricsInterval / 1000); // milliseconds -> second based intervals\n\n          this.mqaProcessor.process(key, interval);\n        }\n      }\n    });\n  }\n\n  /**\n   * Reference to the stats builder object\n   * @param {Object} options - see #createStats\n   * @param {Boolean} override - override the previous getStats\n   * @returns {WebRTCStats}\n   * @public\n   * @memberof Meeting\n   */\n  getStats(options, override) {\n    if (!this.stats) {\n      return this.createStats(options);\n    }\n    if (override) {\n      if (this.stats) {\n        LoggerProxy.logger.log('Meeting:index#getStats --> Overriding the previous stats object without destroying first can result in memory leaks.');\n      }\n\n      return this.createStats(options);\n    }\n\n    return this.stats;\n  }\n\n  /**\n   * write the stats builder object and assign to meeting property\n   * @param {Object} options\n   * @returns {WebRTCStats}\n   * @public\n   * @memberof Meeting\n   */\n  createStats(options = {}) {\n    StatsUtil.generateOptions(options, STATS.CONFIG, this);\n\n    options.config = STATS.CONFIG;\n\n    this.stats = new WebRTCStats(this.attrs, this.options, options);\n\n    return this.stats;\n  }\n\n  /**\n   * if you have started a stats instance, here's how you can stop it\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  stopStats() {\n    if (this.stats) {\n      this.stats.destroySenders();\n      this.stats.destroyReceivers();\n      this.stats = null;\n    }\n  }\n\n  /**\n   * Convenience function to tell whether a meeting is muted\n   * @returns {Boolean} if meeting audio muted or not\n   * @public\n   * @memberof Meeting\n   */\n  isAudioMuted() {\n    return this.audio && this.audio.isMuted();\n  }\n\n  /**\n   * Convenience function to tell if the end user last changed the audio state\n   * @returns {Boolean} if audio was manipulated by the end user\n   * @public\n   * @memberof Meeting\n   */\n  isAudioSelf() {\n    return this.audio && this.audio.isSelf();\n  }\n\n  /**\n   * Convenience function to tell whether video is muted\n   * @returns {Boolean} if meeting video is muted or not\n   * @public\n   * @memberof Meeting\n   */\n  isVideoMuted() {\n    return this.video && this.video.isMuted();\n  }\n\n  /**\n   * Convenience function to tell whether the end user changed the video state\n   * @returns {Boolean} if meeting video is muted or not\n   * @public\n   * @memberof Meeting\n   */\n  isVideoSelf() {\n    return this.video && this.video.isSelf();\n  }\n\n  /**\n   * Sets the meeting info on the class instance\n   * @param {Object} meetingInfo\n   * @param {Object} meetingInfo.body\n   * @param {String} meetingInfo.body.conversationUrl\n   * @param {String} meetingInfo.body.locusUrl\n   * @param {String} meetingInfo.body.sipUri\n   * @param {Object} meetingInfo.body.owner\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  parseMeetingInfo(meetingInfo) {\n    // MeetingInfo will be undefined for 1:1 calls\n    if (meetingInfo && meetingInfo.body && !(meetingInfo.errors && meetingInfo.errors.length > 0)) {\n      this.conversationUrl = meetingInfo.body.conversationUrl || this.conversationUrl;\n      this.locusUrl = meetingInfo.body.locusUrl || this.locusUrl;\n      this.setSipUri(meetingInfo.body.sipMeetingUri || this.sipUri);\n      this.owner = meetingInfo.body.owner || this.owner;\n    }\n  }\n\n  /**\n   * Sets the first locus info on the class instance\n   * @param {Object} locus\n   * @param {String} locus.url\n   * @param {Array} locus.participants\n   * @param {Object} locus.self\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  parseLocus(locus) {\n    if (locus) {\n      this.locusUrl = locus.url;\n      // TODO: move this to parse participants module\n      this.setLocus(locus);\n\n      // check if we can extract this info from partner\n      // Parsing of locus object must be finished at this state\n      if (locus.participants && locus.self) {\n        this.partner = MeetingUtil.getLocusPartner(locus.participants, locus.self);\n      }\n\n      // For webex meeting the sipUrl gets updated in info parser\n      if (!this.sipUri && this.partner && this.type === _CALL_) {\n        this.setSipUri(this.partner.person.sipUrl || this.partner.person.emailAddress || this.partner.person.email);\n      }\n    }\n  }\n\n  /**\n   * Sets the sip uri on the class instance\n   * uses meeting info as precedence\n   * @param {String} sipUri\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setSipUri(sipUri) {\n    // This can be tel no, device id or a sip uri, user Id\n    this.sipUri = sipUri;\n  }\n\n  /**\n   * Set the roap seq on the class instance\n   * @param {Number} seq\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setRoapSeq(seq) {\n    if (seq >= 0) {\n      this.roapSeq = seq;\n    }\n  }\n\n  /**\n   * Set the locus info the class instance\n   * @param {Object} locus\n   * @param {Array} locus.mediaConnections\n   * @param {String} locus.locusUrl\n   * @param {String} locus.locusId\n   * @param {String} locus.mediaId\n   * @param {Object} locus.host\n   * @todo change name to genertic parser\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setLocus(locus) {\n    const mtgLocus = locus.locus || locus;\n\n    // LocusInfo object saves the locus object\n    // this.locus = mtgLocus;\n    this.mediaConnections = locus.mediaConnections;\n    this.locusUrl = locus.locusUrl || locus.url;\n    this.locusId = locus.locusId;\n    this.selfId = locus.selfId;\n    this.mediaId = locus.mediaId;\n    this.hostId = mtgLocus.host ? mtgLocus.host.id : this.hostId;\n    this.locusInfo.initialSetup(mtgLocus);\n  }\n\n  /**\n   * Sets the remote stream on the class instance and emits and\n   * event to developers\n   * @param {Object} pc The remote stream peer connection\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setRemoteStream(pc) {\n    if (!pc) {\n      return;\n    }\n    // eslint-disable-next-line no-param-reassign\n    pc.ontrack = (event) => {\n      // eslint-disable-next-line no-warning-comments\n      // TODO: It's possible for media to not be present\n      // so we might need to either\n      // A) wait until we have media flowing\n      // B) trigger a second event when video is flowing\n      LoggerProxy.logger.log(`Meeting:index#setRemoteStream --> ontrack event received for peerConnection: ${event}`);\n\n      const MEDIA_ID = {\n        AUDIO_TRACK: '0',\n        VIDEO_TRACK: '1',\n        SHARE_TRACK: '2'\n      };\n      let eventType = null;\n      const mediaTrack = event.track;\n      let trackMediaID = null;\n\n\n      // In case of safari some time the transceiver is not present for specific os version\n      // sdk tries to determine the transceive using the track id present\n      if (event.transceiver && event.transceiver.mid) {\n        trackMediaID = event.transceiver.mid;\n      }\n      else {\n        const {audioTransceiver, videoTransceiver, shareTransceiver} = event.target;\n\n        // audio kind indicates its a audio stream\n        if (mediaTrack.id === audioTransceiver.receiver.track.id) {\n          trackMediaID = '0';\n        }\n        else\n        if (mediaTrack.id === videoTransceiver.receiver.track.id) {\n          trackMediaID = '1';\n        }\n        else\n        if (mediaTrack.id === shareTransceiver.receiver.track.id) {\n          trackMediaID = '2';\n        }\n        else {\n          trackMediaID = null;\n        }\n      }\n\n\n      switch (trackMediaID) {\n        case MEDIA_ID.AUDIO_TRACK:\n          eventType = EVENT_TYPES.REMOTE_AUDIO;\n          this.mediaProperties.setRemoteAudioTrack(mediaTrack);\n          break;\n        case MEDIA_ID.VIDEO_TRACK:\n          eventType = EVENT_TYPES.REMOTE_VIDEO;\n          this.mediaProperties.setRemoteVideoTrack(mediaTrack);\n          break;\n        case MEDIA_ID.SHARE_TRACK:\n          if (event.track) {\n            eventType = EVENT_TYPES.REMOTE_SHARE;\n            this.mediaProperties.setRemoteShare(mediaTrack);\n          }\n          break;\n        default: {\n          LoggerProxy.logger.log('Meeting:index#setRemoteStream --> no matching media track id');\n        }\n      }\n\n      if (eventType && mediaTrack) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setRemoteStream:pc.ontrack'\n          },\n          EVENT_TRIGGERS.MEDIA_READY,\n          {\n            type: eventType,\n            stream: MediaUtil.createMediaStream([mediaTrack])\n          }\n        );\n      }\n    };\n  }\n\n  /**\n   * Removes remote audio and video stream on the class instance and triggers an event\n   * to developers\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   * @deprecated after v1.89.3\n   */\n  unsetRemoteStream() {\n    LoggerProxy.logger.warn('Meeting:index#unsetRemoteStream --> [DEPRECATION WARNING]: unsetRemoteStream has been deprecated after v1.89.3');\n    this.mediaProperties.unsetRemoteMedia();\n  }\n\n  /**\n   * Removes remote audio, video and share tracks from class instance's mediaProperties\n   * @returns {undefined}\n   */\n  unsetRemoteTracks() {\n    this.mediaProperties.unsetRemoteTracks();\n  }\n\n  /**\n   * Removes the remote stream on the class instance and triggers an event\n   * to developers\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   * @deprecated after v1.89.3\n   */\n  closeRemoteStream() {\n    LoggerProxy.logger.warn('Meeting:index#closeRemoteStream --> [DEPRECATION WARNING]: closeRemoteStream has been deprecated after v1.89.3');\n    this.closeRemoteTracks();\n  }\n\n  /**\n   * Removes the remote tracks on the class instance and triggers an event\n   * to developers\n   * @returns {undefined}\n   * @memberof Meeting\n   */\n  closeRemoteTracks() {\n    const {\n      remoteAudioTrack,\n      remoteVideoTrack,\n      remoteShare\n    } = this.mediaProperties;\n\n    /**\n     * Triggers an event to the developer\n     * @param {string} mediaType Type of media that was stopped\n     * @returns {void}\n     * @inner\n     */\n    const triggerMediaStoppedEvent = (mediaType) => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'closeRemoteTracks'\n        },\n        EVENT_TRIGGERS.MEDIA_STOPPED,\n        {\n          type: mediaType\n        }\n      );\n    };\n\n    /**\n     * Stops a media track and emits an event\n     * @param {MediaStreamTrack} track Media track to stop\n     * @param {string} type Media track type\n     * @returns {Promise}\n     * @inner\n     */\n    // eslint-disable-next-line arrow-body-style\n    const stopTrack = (track, type) => {\n      return Media.stopTracks(track)\n        .then(() => {\n          const isTrackStopped = track && track.readyState === ENDED;\n          const isWrongReadyState = track && !isTrackStopped;\n\n          if (isTrackStopped) {\n            triggerMediaStoppedEvent(type);\n          }\n          else if (isWrongReadyState) {\n            LoggerProxy.logger.warn(`Meeting:index#closeRemoteTracks --> Error: MediaStreamTrack.readyState is ${track.readyState} for ${type}`);\n          }\n        });\n    };\n\n    return Promise.all([\n      stopTrack(remoteAudioTrack, EVENT_TYPES.REMOTE_AUDIO),\n      stopTrack(remoteVideoTrack, EVENT_TYPES.REMOTE_VIDEO),\n      stopTrack(remoteShare, EVENT_TYPES.REMOTE_SHARE)\n    ]);\n  }\n\n  /**\n   * Sets the local media stream on the class and emits an event to the developer\n   * @param {Stream} localStream the local media stream\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setLocalTracks(localStream) {\n    if (localStream) {\n      const {audioTrack, videoTrack} = MeetingUtil.getTrack(localStream);\n      let settings = null;\n\n      if (audioTrack) {\n        settings = audioTrack.getSettings();\n        this.mediaProperties.setMediaSettings('audio', {\n          echoCancellation: settings.echoCancellation,\n          noiseSuppression: settings.noiseSuppression\n        });\n\n        LoggerProxy.logger.log('Meeting:index#setLocalTracks --> Audio settings.', JSON.stringify(this.mediaProperties.mediaSettings.audio));\n        this.mediaProperties.setLocalAudioTrack(audioTrack);\n      }\n\n      if (videoTrack) {\n        settings = videoTrack.getSettings();\n        this.mediaProperties.setLocalVideoTrack(videoTrack);\n        this.mediaProperties.setMediaSettings('video', {\n          aspectRatio: settings.aspectRatio,\n          frameRate: settings.frameRate,\n          height: settings.height,\n          width: settings.width\n        });\n        // store and save the selected video input device\n        if (settings.deviceId) {\n          this.mediaProperties.setVideoDeviceId(settings.deviceId);\n        }\n        LoggerProxy.logger.log('Meeting:index#setLocalTracks --> Video settings.', JSON.stringify(this.mediaProperties.mediaSettings.video));\n      }\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setLocalTracks'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.LOCAL,\n          stream: MediaUtil.createMediaStream([this.mediaProperties.audioTrack, this.mediaProperties.videoTrack])\n        }\n      );\n    }\n  }\n\n  /**\n   * Sets the local media stream on the class and emits an event to the developer\n   * @param {Stream} localShare the local media stream\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setLocalShareTrack(localShare) {\n    let settings = null;\n\n    if (localShare) {\n      this.mediaProperties.setLocalShareTrack(MeetingUtil.getTrack(localShare).videoTrack);\n      const contentTracks = this.mediaProperties.shareTrack;\n\n      if (contentTracks) {\n        settings = contentTracks.getSettings();\n        this.mediaProperties.setMediaSettings('screen', {\n          aspectRatio: settings.aspectRatio,\n          frameRate: settings.frameRate,\n          height: settings.height,\n          width: settings.width,\n          displaySurface: settings.displaySurface,\n          cursor: settings.cursor\n        });\n        LoggerProxy.logger.log('Meeting:index#setLocalTracks --> Screen settings.', JSON.stringify(this.mediaProperties.mediaSettings.screen));\n      }\n\n      contentTracks.onended = () => {\n        if (this.wirelessShare) {\n          this.leave({reason: MEETING_REMOVED_REASON.USER_ENDED_SHARE_STREAMS});\n        }\n        else {\n          this.stopShare();\n        }\n      };\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setLocalShareTrack'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.LOCAL_SHARE,\n          stream: localShare\n        }\n      );\n    }\n  }\n\n  /**\n   * Closes the local stream from the class and emits an event to the developer\n   * @returns {undefined}\n   * @event media:stopped\n   * @public\n   * @memberof Meeting\n   */\n  closeLocalStream() {\n    const {audioTrack, videoTrack} = this.mediaProperties;\n\n    return Media.stopTracks(audioTrack)\n      .then(() => Media.stopTracks(videoTrack))\n      .then(() => {\n        const audioStopped = audioTrack && audioTrack.readyState === ENDED;\n        const videoStopped = videoTrack && videoTrack.readyState === ENDED;\n\n        if (audioStopped && videoStopped) {\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'closeLocalStream'\n            },\n            EVENT_TRIGGERS.MEDIA_STOPPED, {\n              type: EVENT_TYPES.LOCAL\n            }\n          );\n        }\n        else if (audioTrack || videoTrack) {\n          LoggerProxy.logger.warn('Meeting:index#closeLocalStream --> Error: MediaStreamTrack.readyState is incorrect.');\n        }\n      });\n  }\n\n  /**\n   * Closes the local stream from the class and emits an event to the developer\n   * @returns {undefined}\n   * @event media:stopped\n   * @public\n   * @memberof Meeting\n   */\n  closeLocalShare() {\n    const track = this.mediaProperties.shareTrack;\n\n    return Media.stopTracks(track).then(() => {\n      if (track && track.readyState === ENDED) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'closeLocalShare'\n          },\n          EVENT_TRIGGERS.MEDIA_STOPPED, {\n            type: EVENT_TYPES.LOCAL_SHARE\n          }\n        );\n      }\n      else if (track) {\n        // Track exists but with wrong readyState\n        LoggerProxy.logger.warn(`Meeting:index#closeLocalShare --> Error: MediaStreamTrack.readyState is ${track.readyState} for localShare`);\n      }\n    });\n  }\n\n  /**\n   * Removes the local stream from the class and emits an event to the developer\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetLocalVideoTrack() {\n    this.mediaProperties.unsetLocalVideoTrack();\n  }\n\n  /**\n   * Removes the local share from the class and emits an event to the developer\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetLocalShareTrack() {\n    this.mediaProperties.unsetLocalShareTrack();\n  }\n\n  /**\n   * sets up reconnection logic\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   * @todo remove\n   * // TODO: remove??\n   */\n  setReconnectListener() {\n    // Client will have a socket manager and handle reconnecting to mercury, when we reconnect to mercury\n    // if the meeting has active peer connections, it should try to reconnect.\n    this.webex.internal.mercury.on(ONLINE, () => {\n      LoggerProxy.logger.log('Meeting:index#setReconnectListener --> Web socket online');\n    });\n  }\n\n  /**\n   * Close the peer connections and remove them from the class. Triggers an event\n   * when each is closed.\n   * @returns {Promise} returns a resolved promise with an array of closed peer connections\n   * @public\n   * @memberof Meeting\n   */\n  closePeerConnections() {\n    return PeerConnectionManager.close(this.mediaProperties.peerConnection);\n  }\n\n  /**\n   * Unsets the peer connections on the class\n   * warning DO NOT CALL WITHOUT CLOSING PEER CONNECTIONS FIRST\n   * @param {PeerConnection} peerConnection\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetPeerConnections() {\n    this.mediaProperties.unsetPeerConnection();\n    if (this.config.reconnection.detection) {\n      this.webex.internal.mercury.off(ONLINE);\n    }\n  }\n\n  /**\n   * Convenience method to set the correlation id for the Meeting\n   * @param {String} id correlation id to set on the class\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setCorrelationId(id) {\n    this.correlationId = id;\n  }\n\n  /**\n   * Mute the audio for a meeting\n   * @returns {Promise} resolves the data from muting audio {mute, self} or rejects if there is no audio set\n   * @public\n   * @memberof Meeting\n   */\n  muteAudio() {\n    if (!this.audio || (this.audio && !this.audio.toggle)) {\n      return Promise.reject(new ParameterError('no audio control associated to the meeting'));\n    }\n\n    const LOG_HEADER = 'Meeting:index#muteAudio -->';\n\n    // First, stop sending the local audio media\n    return logRequest(this.audio.toggle({\n      mute: true,\n      self: true\n    })\n      // Next, send the control to mute the participant on the server\n      .then(() => this.mute(this.members.selfId, true))\n      .then(() => {\n        Metrics.postEvent({\n          event: eventType.MUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.AUDIO}\n        });\n      }),\n    {\n      header: `${LOG_HEADER} muting audio`,\n      success: `${LOG_HEADER} muted audio successfully`,\n      failure: `${LOG_HEADER} muting audio failed, `\n    });\n  }\n\n  /**\n   * Unmute meeting audio\n   * @returns {Promise} resolves data from muting audio {mute, self} or rejects if there is no audio set\n   * @public\n   * @memberof Meeting\n   */\n  unmuteAudio() {\n    if (!this.audio || (this.audio && !this.audio.toggle)) {\n      return Promise.reject(new ParameterError('no audio control associated to the meeting'));\n    }\n\n    const LOG_HEADER = 'Meeting:index#unmuteAudio -->';\n\n    // First, send the control to unmute the participant on the server\n    return logRequest(this.mute(this.members.selfId, false)\n      // Next, start sending the local audio media\n      .then(() => this.audio.toggle({\n        mute: false,\n        self: true\n      }))\n      .then(() => {\n        Metrics.postEvent({\n          event: eventType.UNMUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.AUDIO}\n        });\n      }),\n    {\n      header: `${LOG_HEADER} unmuting audio`,\n      success: `${LOG_HEADER} unmuted audio successfully`,\n      failure: `${LOG_HEADER} unmuting audio failed, `\n    });\n  }\n\n  /**\n   * Mute the video for a meeting\n   * @returns {Promise} resolves data from muting video {mute, self} or rejects if there is no video set\n   * @public\n   * @memberof Meeting\n   */\n  muteVideo() {\n    if (!this.video || (this.video && !this.video.toggle)) {\n      return Promise.reject(new ParameterError('no video control associated to the meeting'));\n    }\n\n    const LOG_HEADER = 'Meeting:index#muteVideo -->';\n\n    return logRequest(this.video.toggle({\n      mute: true,\n      self: true\n    })\n      .then(() => {\n        Metrics.postEvent({\n          event: eventType.MUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.VIDEO}\n        });\n      }),\n    {\n      header: `${LOG_HEADER} muting video`,\n      success: `${LOG_HEADER} muted video successfully`,\n      failure: `${LOG_HEADER} muting video failed, `\n    });\n  }\n\n  /**\n   * Unmute meeting video\n   * @returns {Promise} resolves data from muting video {mute, self} or rejects if there is no video set\n   * @public\n   * @memberof Meeting\n   */\n  unmuteVideo() {\n    if (!this.video || (this.video && !this.video.toggle)) {\n      return Promise.reject(new ParameterError('no audio control associated to the meeting'));\n    }\n\n    const LOG_HEADER = 'Meeting:index#unmuteVideo -->';\n\n    return logRequest(this.video.toggle({\n      mute: false,\n      self: true\n    })\n      .then(() => {\n        Metrics.postEvent({\n          event: eventType.UNMUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.VIDEO}\n        });\n      }),\n    {\n      header: `${LOG_HEADER} unmuting video`,\n      success: `${LOG_HEADER} unmuted video successfully`,\n      failure: `${LOG_HEADER} unmuting video failed, `\n    });\n  }\n\n  /**\n   * Shorthand function to join AND set up media\n   * @param {Object} options - options to join with media\n   * @param {JoinOptions} [options.joinOptions] - see #join()\n   * @param {MediaDirection} options.mediaSettings - see #addMedia()\n   * @param {AudioVideo} [options.audioVideoOptions] - see #getMediaStreams()\n   * @returns {Promise} -- {join: see join(), media: see addMedia(), local: see getMediaStreams()}\n   * @public\n   * @memberof Meeting\n   * @example\n   * joinWithMedia({\n   *  joinOptions: {resourceId: 'resourceId' },\n   *  mediaSettings: {\n   *   sendAudio: true,\n   *   sendVideo: true,\n   *   sendShare: false,\n   *   receiveVideo:true,\n   *   receiveAudio: true,\n   *   receiveShare: true\n   * }\n   * audioVideoOptions: {\n   *   audio: 'audioDeviceId',\n   *   video: 'videoDeviceId'\n   * }})\n   */\n  joinWithMedia(options = {}) {\n    // TODO: add validations for parameters\n    const {mediaSettings, joinOptions, audioVideoOptions} = options;\n\n    return this.join(joinOptions)\n      .then((joinResponse) =>\n        this.getMediaStreams(mediaSettings, audioVideoOptions).then(([localStream, localShare]) =>\n          this.addMedia({\n            mediaSettings,\n            localShare,\n            localStream\n          }).then((mediaResponse) => ({\n            join: joinResponse,\n            media: mediaResponse,\n            local: [localStream, localShare]\n          }))))\n      .catch((error) => {\n        LoggerProxy.logger.error('Meeting:index#joinWithMedia --> ', error);\n\n        return Promise.reject(error);\n      });\n  }\n\n  /**\n   * Initiates the reconnection of the media in the meeting\n   *\n   * @param {object} options\n   * @returns {Promise} resolves with {reconnect} or errors with {error}\n   * @public\n   * @memberof Meeting\n   */\n  reconnect(options) {\n    LoggerProxy.logger.log('Meeting:index#reconnect --> attempting to reconnect');\n\n    if (!this.reconnectionManager || !this.reconnectionManager.reconnect) {\n      throw new ParameterError('Cannot reconnect, ReconnectionManager must first be defined.');\n    }\n\n    try {\n      LoggerProxy.logger.info('Meeting:index#reconnect --> Validating reconnect ability.');\n      this.reconnectionManager.validate();\n    }\n    catch (error) {\n      // Unable to reconnect this call\n      if (error instanceof ReconnectInProgress) {\n        LoggerProxy.logger.info('Meeting:index#reconnect --> Unable to reconnect, reconnection in progress.');\n      }\n      else {\n        LoggerProxy.logger.log('Meeting:index#reconnect --> Unable to reconnect.', error);\n      }\n\n      return Promise.resolve();\n    }\n\n    Trigger.trigger(\n      this,\n      {\n        file: 'meeting/index',\n        function: 'reconnect'\n      },\n      EVENT_TRIGGERS.MEETING_RECONNECTION_STARTING\n    );\n\n\n    return this.reconnectionManager\n      .reconnect(options)\n      .then(() => {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'reconnect'\n          },\n          EVENT_TRIGGERS.MEETING_RECONNECTION_SUCCESS\n        );\n        LoggerProxy.logger.log('Meeting:index#reconnect --> Meeting reconnect success');\n      })\n      .catch((error) => {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'reconnect'\n          },\n          EVENT_TRIGGERS.MEETING_RECONNECTION_FAILURE,\n          {\n            error: new ReconnectionError('Reconnection failure event', error)\n          }\n        );\n\n        LoggerProxy.logger.error('Meeting:index#reconnect --> Meeting reconnect failed', error);\n\n        return Promise.reject(new ReconnectionError('Reconnection failure event', error));\n      })\n      .finally(() => {\n        this.reconnectionManager.reset();\n      });\n  }\n\n  /**\n   * Specify joining via audio (option: pstn), video, screenshare\n   * @param {JoinOptions} options A configurable options object for joining a meeting\n   * @returns {Promise} the join response\n   * @public\n   * @memberof Meeting\n   * Scenario A: Joining own claimed personal meeting room\n   * Scenario B: Joining other's claimed personal meeting room, do pass pin (if desired to join as host, or nullify), do pass moderator\n   * Scenario C: Joining an unclaimed personal meeting room, -do not- pass pin or moderator on first try, -do- pass pin and moderator\n   *             if joining as host on second loop, pass pin and pass moderator if joining as guest on second loop\n   * Scenario D: Joining any other way (sip, pstn, conversationUrl, link just need to specify resourceId)\n   */\n  join(options = {}) {\n    // If Move or PSTN try merging into one\n    if (false) {\n      Metrics.postEvent({\n        event: eventType.CALL_INITIATED,\n        meeting: this,\n        data: {pstnAudioType: 'DIAL_IN'}\n      });\n    }\n    else {\n      Metrics.postEvent({\n        event: eventType.CALL_INITIATED,\n        meeting: this,\n        data: {trigger: trigger.USER_INTERACTION}\n      });\n    }\n\n    LoggerProxy.logger.log('Meeting:index#join --> Joining a meeting');\n\n    if (this.meetingFiniteStateMachine.state === MEETING_STATE_MACHINE.STATES.ENDED) {\n      this.meetingFiniteStateMachine.reset();\n    }\n    if (this.meetingFiniteStateMachine.state !== MEETING_STATE_MACHINE.STATES.RINGING) {\n      this.meetingFiniteStateMachine.ring(_JOIN_);\n    }\n\n    // TODO: does this really need to be here?\n    if (options.resourceId && this.destination && options.resourceId === this.destination) {\n      this.wirelessShare = true;\n    }\n\n    if (options.meetingQuality) {\n      if (typeof options.meetingQuality === 'string') {\n        if (!QUALITY_LEVELS[options.meetingQuality]) {\n          const errorMessage = `Meeting:index#join --> ${options.meetingQuality} not defined`;\n\n          LoggerProxy.logger.error(errorMessage);\n\n          return Promise.reject(new Error(errorMessage));\n        }\n\n        this.mediaProperties.setLocalQualityLevel(options.meetingQuality);\n        this.mediaProperties.setRemoteQualityLevel(options.meetingQuality);\n      }\n\n      if (typeof options.meetingQuality === 'object') {\n        if (\n          !QUALITY_LEVELS[options.meetingQuality.local] &&\n          !QUALITY_LEVELS[options.meetingQuality.remote]\n        ) {\n          const errorMessage = `Meeting:index#join --> ${\n            options.meetingQuality.local || options.meetingQuality.remote\n          } not defined`;\n\n          LoggerProxy.logger.error(errorMessage);\n\n          return Promise.reject(new Error(errorMessage));\n        }\n\n        if (options.meetingQuality.local) {\n          this.mediaProperties.setLocalQualityLevel(options.meetingQuality.local);\n        }\n        if (options.meetingQuality.remote) {\n          this.mediaProperties.setRemoteQualityLevel(options.meetingQuality.remote);\n        }\n      }\n    }\n\n    return MeetingUtil.joinMeetingOptions(this, options).then((join) => {\n      this.meetingFiniteStateMachine.join();\n      LoggerProxy.logger.log('Meeting:index#join --> Success');\n\n      return join;\n    }).catch((error) => {\n      this.meetingFiniteStateMachine.fail(error);\n      LoggerProxy.logger.error('Meeting:index#join --> Failed', error);\n\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Moves the call to the specified resourceId\n   * @param {String} resourceId\n   * @returns {Promise} once the move has been completed\n   * @public\n   * @memberof Meeting\n   */\n  moveTo(resourceId) {\n    if (!resourceId) {\n      throw new ParameterError('Cannot move call without a resourceId.');\n    }\n\n    Metrics.mediaCapabilities({\n      meeting: this,\n      data: {\n        mediaCapabilities: {\n          rx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          },\n          tx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          }\n        }\n      }\n    });\n    Metrics.moveMedia({meeting: this});\n\n    return MeetingUtil.joinMeetingOptions(this, {resourceId, moveToResource: true}).then(() => {\n      this.meetingFiniteStateMachine.join();\n\n      return this.updateMedia({\n        mediaSettings: {\n          sendVideo: false, receiveVideo: false, sendAudio: false, receiveAudio: false, sendShare: false, receiveShare: false\n        }\n      }).then(() => Promise.resolve(this));\n    }).catch((error) => {\n      this.meetingFiniteStateMachine.fail(error);\n\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Moves the call from the specified resourceId, back to computer\n   * @param {String} resourceId\n   * @returns {Promise} once the move has been completed\n   * @public\n   * @memberof Meeting\n   */\n  moveFrom(resourceId) {\n    if (!resourceId) {\n      throw new ParameterError('Cannot move call without a resourceId.');\n    }\n    const oldCorrelationId = this.correlationId;\n\n    this.id = uuid.v4();\n\n    this.webex.meetings.meetingCollection.set(this);\n\n    Metrics.mediaCapabilities({\n      meeting: this,\n      data: {\n        mediaCapabilities: {\n          rx: {\n            audio: true,\n            share: true,\n            share_audio: true,\n            video: true,\n            whiteboard: true\n          },\n          tx: {\n            audio: true,\n            share: true,\n            share_audio: true,\n            video: true,\n            whiteboard: true\n          }\n        }\n      }\n    });\n    Metrics.moveMedia({meeting: this});\n\n    return MeetingUtil.joinMeetingOptions(this).then((join) => this.getMediaStreams({sendAudio: true, sendVideo: true, sendShare: false})\n      .then(([localStream, localShare]) =>\n        this.updateMedia({\n          mediaSettings: {\n            sendAudio: true, receiveAudio: true, sendVideo: true, receiveVideo: true, sendShare: false, receiveShare: false\n          },\n          localStream,\n          localShare\n        })\n          .then(() => Promise.resolve(join)))\n      .then(() => MeetingUtil.leaveMeeting(this, {resourceId, correlationId: oldCorrelationId, moveMeeting: true})))\n      .then(() => {\n        this.webex.meetings.meetingCollection.delete(oldCorrelationId);\n\n        return Promise.resolve();\n      });\n  }\n\n  /**\n   * Get local media streams based on options passed\n   * @param {MediaDirection} mediaDirection A configurable options object for joining a meeting\n   * @param {AudioVideo} [audioVideo] audio/video object to set audioinput and videoinput devices, see #Media.getUserMedia\n   * @param {SharePreferences} [sharePreferences] audio/video object to set audioinput and videoinput devices, see #Media.getUserMedia\n   * @returns {Promise} see #Media.getUserMedia\n   * @public\n   * @todo should be static, or moved so can be called outside of a meeting\n   * @memberof Meeting\n   */\n  getMediaStreams = (\n    mediaDirection,\n    // This return an OBJECT {video: {height, widght}}\n    audioVideo = VIDEO_RESOLUTIONS[this.mediaProperties.localQualityLevel],\n    sharePreferences\n  ) => {\n    if (\n      mediaDirection &&\n      (\n        mediaDirection.sendAudio ||\n        mediaDirection.sendVideo ||\n        mediaDirection.sendShare\n      )\n    ) {\n      if (mediaDirection &&\n        (\n          mediaDirection.sendAudio &&\n          mediaDirection.sendVideo &&\n          mediaDirection.sendShare\n        ) &&\n        bowser.safari\n      ) {\n        LoggerProxy.logger.warn('Meeting:index#getMediaStreams --> Setting `sendShare` to FALSE, due to complications with Safari');\n\n        mediaDirection.sendShare = false;\n\n        LoggerProxy.logger.warn('Meeting:index#getMediaStreams --> Enabling `sendShare` along with `sendAudio` & `sendVideo`, on Safari, causes a failure while setting up a screen share at the same time as the camera+mic stream');\n        LoggerProxy.logger.warn('Meeting:index#getMediaStreams --> Please use `meeting.shareScreen()` to manually start the screen share after successfully joining the meeting');\n      }\n\n      // extract deviceId if exists otherwise default to null.\n      const {deviceId: preferredVideoDevice} = (audioVideo && audioVideo.video || {deviceId: null});\n      const lastVideoDeviceId = this.mediaProperties.getVideoDeviceId();\n\n      if (preferredVideoDevice) {\n        // Store new preferred video input device\n        this.mediaProperties.setVideoDeviceId(preferredVideoDevice);\n      }\n      else if (lastVideoDeviceId) {\n        // no new video preference specified so use last stored value,\n        // works with empty object {} or media constraint.\n        // eslint-disable-next-line no-param-reassign\n        audioVideo = {\n          ...audioVideo,\n          video: {\n            ...audioVideo.video,\n            deviceId: lastVideoDeviceId\n          }\n        };\n      }\n\n      return Media.getSupportedDevice({\n        sendAudio: mediaDirection.sendAudio,\n        sendVideo: mediaDirection.sendVideo\n      })\n        .catch((error) => Promise.reject(\n          new MediaError('Given constraints do not match permission set for either camera or microphone', error)\n        ))\n        .then((devicePermissions) =>\n          Media.getUserMedia(\n            {\n              ...mediaDirection,\n              sendAudio: (mediaDirection.sendAudio === devicePermissions.sendAudio),\n              sendVideo: (mediaDirection.sendVideo === devicePermissions.sendVideo),\n              isSharing: this.isSharing\n            },\n            audioVideo,\n            sharePreferences,\n            this.config\n          )\n            .catch((error) => {\n              // Whenever there is a failure when trying to access a user's device\n              // report it as an operational metric\n              // This gives visibility into common errors and can help\n              // with further troubleshooting\n              const metricName = METRICS_OPERATIONAL_MEASURES.GET_USER_MEDIA_FAILURE;\n              const data = {\n                correlation_id: this.correlationId,\n                locus_id: this.locusUrl.split('/').pop(),\n                reason: error.message\n              };\n              const metadata = {\n                type: error.name\n              };\n\n              Metrics.sendOperationalMetric(metricName, data, metadata);\n              throw new MediaError('Unable to retrieve media streams');\n            }));\n    }\n\n    return Promise.reject(\n      new MediaError('At least one of the mediaDirection value should be true')\n    );\n  };\n\n\n  /**\n   * Checks if the machine has at least one audio or video device\n   * @param {Object} options\n   * @param {Boolean} options.sendAudio\n   * @param {Boolean} options.sendVideo\n   * @returns {Object}\n   * @memberof Meetings\n   */\n  getSupportedDevices = ({sendAudio = true, sendVideo = true}) => Media.getSupportedDevice({sendAudio, sendVideo});\n\n  /**\n   * Get the devices from the Media module\n   * @returns {Promise} resolves to an array of DeviceInfo\n   * @memberof Meetings\n   */\n  getDevices = () => Media.getDevices();\n\n  /**\n   * Specify joining via audio (option: pstn), video, screenshare\n   * @param {Object} options A configurable options object for joining a meeting\n   * @param {Object} options.resourceId pass the deviceId\n   * @param {MediaDirection} options.mediaSettings pass media options\n   * @param {MediaStream} options.localStream\n   * @param {MediaStream} options.localShare\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  addMedia(options = {}) {\n    const LOG_HEADER = 'Meeting:index#addMedia -->';\n\n    if (MeetingUtil.isGuestUnjoined(this.locusInfo) && !this.wirelessShare) {\n      return Promise.reject(new MediaError(`To add media, the ${this.guest ? 'guest' : ''} user must be ${this.guest ? 'admitted. Wait to be admitted' : 'joined to the meeting'} to call addMedia`));\n    }\n    const {localStream, localShare, mediaSettings} = options;\n\n    LoggerProxy.logger.info(`${LOG_HEADER} Adding Media.`);\n\n    Metrics.postEvent({\n      event: eventType.MEDIA_CAPABILITIES,\n      meeting: this,\n      data: {\n        mediaCapabilities: {\n          rx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          },\n          tx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          }\n        }\n      }\n    });\n\n    return MeetingUtil.validateOptions(options)\n      .then(() => {\n        if (!this.mediaProperties.peerConnection) {\n          this.mediaProperties.setMediaPeerConnection(MediaUtil.createPeerConnection());\n        }\n        this.setReconnectListener();\n        PeerConnectionManager.setPeerConnectionEvents(this);\n\n        return this.preMedia(localStream, localShare, mediaSettings);\n      })\n      .then(() => Media.attachMedia(this.mediaProperties, {\n        meetingId: this.id,\n        remoteQualityLevel: this.mediaProperties.remoteQualityLevel\n      })\n        .then((peerConnection) => {\n          LoggerProxy.logger.info(`${LOG_HEADER} PeerConnection Received from attachMedia ${peerConnection}`);\n          this.setRemoteStream(peerConnection);\n          MeetingUtil.startInternalStats(this);\n          if (this.config.metrics.autoSendMQA) {\n            this.startMediaQualityMetrics();\n          }\n          if (this.config.stats.enableStatsAnalyzer) {\n            this.statsAnalyzer = new StatsAnalyzer(this.config.stats);\n            this.statsAnalyzer.on(EVENT_TRIGGERS.MEDIA_QUALITY, (res) => {\n              // TODO:  might have to send the same event to the developer\n              Metrics.postEvent({event: eventType.MEDIA_QUALITY, meetingId: this.correlationId, data: {intervalData: res}});\n            });\n            this.statsAnalyzer.on(EVENT_TRIGGERS.MEETING_HIGH_PACKETLOSS, (res) => {\n              if (res.mediaType === VIDEO) {\n                if (this.config.stats.autoDowngradeEnabled && this.canUpdateMedia()) {\n                  LoggerProxy.logger.log(`${LOG_HEADER} High Packet Loss Detected, Adjusting Local Video Quality`);\n                  if (this.mediaProperties.localQualityLevel === QUALITY_LEVELS.HIGH) {\n                    this.setLocalVideoQuality(QUALITY_LEVELS.MEDIUM);\n                  }\n                  else if (this.mediaProperties.localQualityLevel === QUALITY_LEVELS.MEDIUM) {\n                    this.setLocalVideoQuality(QUALITY_LEVELS.LOW);\n                  }\n                }\n                Trigger.trigger(\n                  this,\n                  {\n                    file: 'meeting/index',\n                    function: 'addMedia'\n                  },\n                  EVENT_TRIGGERS.MEETING_HIGH_PACKETLOSS,\n                  {\n                    mediaType: res.mediaType,\n                    packetLossRatio: res.packetLossRatio\n                  }\n                );\n              }\n            });\n            // This is the right place to start the stats\n            this.statsAnalyzer.startAnalyzer(peerConnection);\n          }\n        })\n        .catch((err) => {\n          LoggerProxy.logger.error(`${LOG_HEADER} Error joining the call on roap initialization, `, err);\n          throw err;\n        })\n        .then(() => new Promise((resolve, reject) => {\n          let timerCount = 0;\n\n          // eslint-disable-next-line func-names\n          // eslint-disable-next-line prefer-arrow-callback\n          if (this.type === _CALL_) {\n            resolve();\n          }\n          const joiningTimer = setInterval(() => {\n            timerCount += 1;\n            if (this.meetingState === FULL_STATE.ACTIVE) {\n              clearInterval(joiningTimer);\n              resolve();\n            }\n\n            if (timerCount === 4) {\n              clearInterval(joiningTimer);\n              reject(new Error('Meeting is still not active '));\n            }\n          }, 1000);\n        }))\n        .then(() => logRequest(this.roap\n          .sendRoapMediaRequest({\n            sdp: this.mediaProperties.peerConnection.sdp,\n            roapSeq: this.roapSeq,\n            meeting: this // or can pass meeting ID\n          }), {\n          header: `${LOG_HEADER} Send Roap Media Request.`,\n          success: `${LOG_HEADER} Successfully send roap media request`,\n          failure: `${LOG_HEADER} Error joining the call on send roap media request, `\n        }))\n\n        .then(() => {\n          if (mediaSettings && mediaSettings.sendShare && localShare) {\n            if (this.state === MEETING_STATE.STATES.JOINED) {\n              return this.share();\n            }\n\n            // When the self state changes to JOINED then request the floor\n            this.floorGrantPending = true;\n          }\n\n          return Promise.resolve();\n        }));\n  }\n\n  /**\n   * Informs if the peer connection is in a state that can be updated with updateMedia (audio/video/share)\n   * @returns {Boolean}\n   */\n  canUpdateMedia() {\n    return this.mediaProperties.peerConnection.signalingState === SDP.STABLE;\n  }\n\n  /**\n   * A confluence of updateAudio, updateVideo, and updateShare\n   * this function re-establishes all of the media streams with new options\n   * @param {Object} options\n   * @param {MediaStream} options.localStream\n   * @param {MediaStream} options.localShare\n   * @param {MediaDirection} options.mediaSettings\n   * @returns {Promise}\n   * @todo fix setRemoteStream for updateMedia\n   * @public\n   * @memberof Meeting\n   */\n  updateMedia(options = {}) {\n    const LOG_HEADER = 'Meeting:index#updateMedia -->';\n\n    if (!this.canUpdateMedia()) {\n      return Promise.reject(new MediaError('The peer connection is currently negotiation an offer. Please wait for a few seconds and try again.'));\n    }\n    const {localStream, localShare, mediaSettings} = options;\n\n    const previousSendShareStatus = this.mediaProperties.mediaDirection.sendShare;\n\n    return MeetingUtil.validateOptions(options)\n      .then(() => this.preMedia(localStream, localShare, mediaSettings))\n      .then(() => Media.updateMedia(this.mediaProperties, {\n        meetingId: this.id,\n        remoteQualityLevel: this.mediaProperties.remoteQualityLevel\n      })\n        .then((peerConnection) => {\n          LoggerProxy.logger.info(`${LOG_HEADER} PeerConnection received from updateMedia, ${peerConnection}`);\n          this.setRemoteStream(peerConnection);\n          if (mediaSettings.receiveShare || localShare) {\n            PeerConnectionManager.setContentSlides(peerConnection);\n          }\n        })\n        .catch((err) => {\n          LoggerProxy.logger.error(`${LOG_HEADER} Error updatedMedia, `, err);\n          throw err;\n        })\n        .then(() =>\n          logRequest(this.roap\n            .sendRoapMediaRequest({\n              sdp: this.mediaProperties.peerConnection.sdp,\n              roapSeq: this.roapSeq,\n              meeting: this // or can pass meeting ID\n            }),\n          {\n            header: `${LOG_HEADER} sendRoapMediaRequest being sent`,\n            success: `${LOG_HEADER} sendRoadMediaRequest successful`,\n            failure: `${LOG_HEADER} Error updateMedia on send roap media request, `\n          }))\n        .then(() => this.checkForStopShare(mediaSettings.sendShare, previousSendShareStatus))\n        .then((startShare) => {\n          // This is a special case if we do an /floor grant followed by /media\n          // we actually get a OFFER from the server and a GLAR condition happens\n          if (startShare) {\n            // We are assuming that the clients are connected when doing an update\n            return this.share();\n          }\n\n          return Promise.resolve();\n        }));\n  }\n\n  /**\n   * Update the main audio streams with new parameters\n   * @param {Object} options\n   * @param {boolean} options.sendAudio\n   * @param {boolean} options.receiveAudio\n   * @param {MediaStream} options.stream\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  updateAudio(options) {\n    if (!this.canUpdateMedia()) {\n      return Promise.reject(new MediaError('The peer connection is currently negotiation an offer. Please wait for a few seconds and try again.'));\n    }\n    const {sendAudio, receiveAudio, stream} = options;\n    const {audioTransceiver} = this.mediaProperties.peerConnection;\n    const track = MeetingUtil.getTrack(stream).audioTrack;\n\n    if (typeof sendAudio !== 'boolean' || typeof receiveAudio !== 'boolean') {\n      return Promise.reject(new ParameterError('Pass sendVideo and receiveVideo parameter'));\n    }\n\n    return MeetingUtil.validateOptions({sendAudio, localStream: stream})\n      .then(() => {\n        let previousMediaDirection = {};\n\n        if (this.mediaProperties.mediaDirection) {\n          previousMediaDirection = {\n            sendTrack: this.mediaProperties.mediaDirection.sendAudio,\n            receiveTrack: this.mediaProperties.mediaDirection.receiveAudio\n          };\n        }\n        else {\n          this.mediaProperties.mediaDirection = {};\n        }\n\n        return MeetingUtil.updateTransceiver(\n          {\n            type: 'audio',\n            sendTrack: options.sendAudio,\n            receiveTrack: options.receiveAudio,\n            track,\n            transceiver: audioTransceiver,\n            peerConnection: this.mediaProperties.peerConnection,\n            previousMediaDirection\n          },\n          {\n            mediaProperties: this.mediaProperties,\n            roapSeq: this.roapSeq,\n            meeting: this,\n            id: this.id\n          }\n        );\n      })\n      .then(() => {\n        this.setLocalTracks(stream);\n        this.mediaProperties.mediaDirection.sendAudio = sendAudio;\n        this.mediaProperties.mediaDirection.receiveAudio = receiveAudio;\n\n        // audio state could be undefined if you have not sent audio before\n        this.audio = this.audio || AudioStateMachine.create(this.mediaProperties.mediaDirection, this);\n      });\n  }\n\n  /**\n   * Update the main video streams with new parameters\n   * @param {Object} options\n   * @param {boolean} options.sendVideo\n   * @param {boolean} options.receiveVideo\n   * @param {MediaStream} options.stream\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  updateVideo(options) {\n    if (!this.canUpdateMedia()) {\n      return Promise.reject(new MediaError('The peer connection is currently negotiation an offer. Please wait for a few seconds and try again.'));\n    }\n    const {sendVideo, receiveVideo, stream} = options;\n    const {videoTransceiver} = this.mediaProperties.peerConnection;\n    const track = MeetingUtil.getTrack(stream).videoTrack;\n\n    if (typeof sendVideo !== 'boolean' || typeof receiveVideo !== 'boolean') {\n      return Promise.reject(new ParameterError('Pass sendVideo and receiveVideo parameter'));\n    }\n\n    return MeetingUtil.validateOptions({sendVideo, localStream: stream})\n      .then(() => MeetingUtil.updateTransceiver({\n        type: 'video',\n        sendTrack: options.sendVideo,\n        receiveTrack: options.receiveVideo,\n        track,\n        transceiver: videoTransceiver,\n        peerConnection: this.mediaProperties.peerConnection,\n        previousMediaDirection: {\n          sendTrack: this.mediaProperties.mediaDirection.sendVideo,\n          receiveTrack: this.mediaProperties.mediaDirection.receiveVideo\n        }\n      },\n      {\n        mediaProperties: this.mediaProperties,\n        roapSeq: this.roapSeq,\n        meeting: this,\n        id: this.id\n      }))\n      .then(() => {\n        this.setLocalTracks(stream);\n        this.mediaProperties.mediaDirection.sendVideo = sendVideo;\n        this.mediaProperties.mediaDirection.receiveVideo = receiveVideo;\n\n        // video state could be undefined if you have not sent video before\n        this.video = this.video || VideoStateMachine.create(this.mediaProperties.mediaDirection, this);\n      });\n  }\n\n  /**\n   * Internal function when stopping a share stream, cleanup\n   * @param {boolean} sendShare\n   * @param {boolean} previousShareStatus\n   * @returns {Promise}\n   * @private\n   * @memberof Meeting\n   */\n  checkForStopShare(sendShare, previousShareStatus) {\n    if (!this.isSharing && sendShare &&\n      !previousShareStatus) {\n      // When user starts sharing\n      // return this.share();\n      return Promise.resolve(true);\n    }\n    if (this.isSharing && !sendShare &&\n      previousShareStatus) {\n      // When user stops sharing\n      return this.stopShare()\n        .then(() => Promise.resolve(false));\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Update the share streams, can be used to start sharing\n   * @param {Object} options\n   * @param {boolean} options.sendShare\n   * @param {boolean} options.receiveShare\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  updateShare(options) {\n    if (!this.canUpdateMedia()) {\n      return Promise.reject(new MediaError('The peer connection is currently negotiation an offer. Please wait for a few seconds and try again.'));\n    }\n    const {sendShare, receiveShare, stream} = options;\n    const {shareTransceiver} = this.mediaProperties.peerConnection;\n    const track = MeetingUtil.getTrack(stream).videoTrack;\n\n    if (typeof sendShare !== 'boolean' || typeof receiveShare !== 'boolean') {\n      return Promise.reject(new ParameterError('Pass sendShare and receiveShare parameter'));\n    }\n    const previousSendShareStatus = this.mediaProperties.mediaDirection.sendShare;\n\n    return MeetingUtil.validateOptions({sendShare, localShare: stream})\n      .then(() => this.checkForStopShare(sendShare, previousSendShareStatus))\n      .then((startShare) => MeetingUtil.updateTransceiver({\n        type: 'video',\n        sendTrack: sendShare,\n        receiveTrack: receiveShare,\n        track,\n        transceiver: shareTransceiver,\n        peerConnection: this.mediaProperties.peerConnection,\n        previousMediaDirection: {\n          sendTrack: this.mediaProperties.mediaDirection.sendShare,\n          receiveTrack: this.mediaProperties.mediaDirection.receiveShare\n        }\n      },\n      {\n        mediaProperties: this.mediaProperties,\n        roapSeq: this.roapSeq,\n        meeting: this,\n        id: this.id\n      })\n        .then(() => {\n          if (startShare) {\n            return this.share();\n          }\n\n          return Promise.resolve();\n        }))\n      .then(() => {\n        this.setLocalShareTrack(stream);\n        this.mediaProperties.mediaDirection.sendShare = sendShare;\n        this.mediaProperties.mediaDirection.receiveShare = receiveShare;\n      });\n  }\n\n  /**\n   * Do all the attach media pre set up before executing the actual attach\n   * @param {MediaStream} localStream\n   * @param {MediaStream} localShare\n   * @param {MediaDirection} mediaSettings\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  preMedia(localStream, localShare, mediaSettings) {\n    // eslint-disable-next-line no-warning-comments\n    // TODO wire into default config. There's currently an issue with the stateless plugin or how we register\n    this.mediaProperties.setMediaDirection(Object.assign(this.config.mediaSettings, mediaSettings));\n    // add a setup a function move the create and setup media in future\n    // TODO: delete old audio and video if stale\n    this.audio = this.audio || AudioStateMachine.create(this.mediaProperties.mediaDirection, this);\n    this.video = this.video || VideoStateMachine.create(this.mediaProperties.mediaDirection, this);\n    // Validation is already done in addMedia so no need to check if the lenght is greater then 0\n    this.setLocalTracks(localStream);\n    this.setLocalShareTrack(localShare);\n  }\n\n  /**\n   * Acknowledge the meeting, outgoing or incoming\n   * @param {String} type\n   * @returns {Promise} resolve {message, ringing, response}\n   * @public\n   * @memberof Meeting\n   */\n  acknowledge(type) {\n    if (!type) {\n      return Promise.reject(new ParameterError('Type must be set to acknowledge the meeting.'));\n    }\n    if (type === _INCOMING_) {\n      return this.meetingRequest\n        .acknowledgeMeeting({\n          locusUrl: this.locusUrl,\n          deviceUrl: this.deviceUrl,\n          id: this.id\n        })\n        .then((response) => Promise.resolve(response))\n        .then((response) => {\n          this.meetingFiniteStateMachine.ring(type);\n          Metrics.postEvent({event: eventType.ALERT_DISPLAYED, meeting: this});\n\n          return Promise.resolve({\n            response\n          });\n        });\n    }\n\n    // TODO: outside of 1:1 incoming, and all outgoing calls\n    return Promise.resolve({\n      message: 'noop'\n    });\n  }\n\n  /**\n   * Decline this meeting\n   * @param {String} reason\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  decline(reason = _BUSY_) {\n    return MeetingUtil.declineMeeting(this, reason).then((decline) => {\n      this.meetingFiniteStateMachine.decline();\n\n      return Promise.resolve(decline);\n    }).catch((error) => {\n      this.meetingFiniteStateMachine.fail(error);\n\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Leave the current meeting\n   * @param {Object} options leave options\n   * @param {String} options.resourceId the device with which to leave from, empty if just the computer\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  leave(options = {}) {\n    Metrics.postEvent({event: eventType.LEAVE, meeting: this, data: {trigger: trigger.USER_INTERACTION, canProceed: false}});\n    const leaveReason = options.reason || MEETING_REMOVED_REASON.CLIENT_LEAVE_REQUEST;\n\n    LoggerProxy.logger.log('Meeting:index#leave --> Leaving a meeting');\n\n    return MeetingUtil.leaveMeeting(this, options)\n      .then((leave) => {\n        this.meetingFiniteStateMachine.leave();\n        // TODO: more testing before we remove this code, we are not sure the scenarios for destroy here\n        if (this.wirelessShare || this.guest) {\n          // If screen sharing clean the meeting object\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'leave'\n            },\n            EVENTS.DESTROY_MEETING,\n            {\n              reason: options.reason,\n              meetingId: this.id\n            }\n          );\n        }\n        LoggerProxy.logger.log('Meeting:index#leave --> LEAVE REASON ', leaveReason);\n\n        return leave;\n      }).catch((error) => {\n        this.meetingFiniteStateMachine.fail(error);\n        LoggerProxy.logger.error('Meeting:index#leave --> Failed to leave ', error);\n\n        return Promise.reject(error);\n      });\n  }\n\n  /**\n   * Start sharing content with server\n   * @returns {Promise} see #meetingRequest.changeMeetingFloor\n   * @private\n   * @memberof Meeting\n   */\n  share() {\n    const content = this.locusInfo.mediaShares.find((element) => element.name === CONTENT);\n\n    if (content && !this.isSharing) {\n      Metrics.postEvent({event: eventType.SHARE_INITIATED, meeting: this});\n\n      return this.meetingRequest.changeMeetingFloor({\n        disposition: FLOOR_ACTION.GRANTED,\n        personUrl: this.locusInfo.self.url,\n        deviceUrl: this.deviceUrl,\n        uri: content.url,\n        resourceUrl: this.resourceUrl\n      })\n        .then(() => {\n          this.isSharing = true;\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'share'\n            },\n            EVENT_TRIGGERS.MEETING_STARTED_SHARING_LOCAL,\n          );\n          Metrics.postEvent({event: eventType.LOCAL_SHARE_FLOOR_GRANTED, meeting: this});\n\n          return Promise.resolve();\n        })\n        .catch((e) => {\n          LoggerProxy.logger.error('Meeting:index#share --> Error ', e);\n\n          return Promise.reject(e);\n        });\n    }\n\n    return Promise.reject(new ParameterError('Cannot share without content.'));\n  }\n\n  /**\n   * Stops the screen share\n   * @returns {Promise} see #meetingRequest.changeMeetingFloor\n   * @public\n   * @memberof Meeting\n   */\n  stopShare() {\n    const content = this.locusInfo.mediaShares.find((element) => element.name === CONTENT);\n\n    if (content && this.isSharing) {\n      Metrics.postEvent({event: eventType.SHARE_STOPPED, meeting: this});\n      Media.stopTracks(this.mediaProperties.shareTrack);\n\n      return this.meetingRequest.changeMeetingFloor({\n        disposition: FLOOR_ACTION.RELEASED,\n        personUrl: this.locusInfo.self.url,\n        deviceUrl: this.deviceUrl,\n        uri: content.url,\n        resourceUrl: this.resourceUrl\n      })\n        .catch((e) => {\n          LoggerProxy.logger.error('Meeting:index#stopShare --> Error ', e);\n\n          return Promise.reject(e);\n        })\n        .finally(() => {\n          this.isSharing = false;\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'stopShare'\n            },\n            EVENT_TRIGGERS.MEETING_STOPPED_SHARING_LOCAL,\n            {\n              reason: SHARE_STOPPED_REASON.SELF_STOPPED\n            }\n          );\n        });\n    }\n\n    return Promise.reject(new ParameterError('Cannot stop share without content'));\n  }\n\n  /**\n   * Intiate a recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  startRecording() {\n    return MeetingUtil.startRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * End the recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  stopRecording() {\n    return MeetingUtil.stopRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * Pauses the recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  pauseRecording() {\n    return MeetingUtil.pauseRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * Resumes the recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  resumeRecording() {\n    return MeetingUtil.resumeRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * Locks the current meeting if possible\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  lockMeeting() {\n    return MeetingUtil.lockMeeting(this.inMeetingActions, this.meetingRequest, this.locusUrl);\n  }\n\n  /**\n   * Unlocks the current meeting if possible\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  unlockMeeting() {\n    return MeetingUtil.unlockMeeting(this.inMeetingActions, this.meetingRequest, this.locusUrl);\n  }\n\n  /**\n   * Sends DTMF tones to the current meeting\n   * @param {String} tones a string of one or more DTMF tones to send\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  sendDTMF(tones) {\n    const reject = (message) => {\n      LoggerProxy.logger.error(message);\n\n      return Promise.reject(new Error(message));\n    };\n\n    if (this.locusInfo && this.locusInfo.self) {\n      if (this.locusInfo.self.enableDTMF) {\n        return this.meetingRequest\n          .sendDTMF({\n            locusUrl: this.locusInfo.self.url,\n            deviceUrl: this.deviceUrl,\n            tones\n          });\n      }\n\n      return reject('Meeting:index#sendDTMF --> cannot send DTMF, meeting does not have DTMF enabled');\n    }\n\n    return reject('Meeting:index#sendDTMF --> cannot send DTMF, meeting does not have a connection to the \"locus\" call control service. Have you joined?');\n  }\n\n  /**\n   * Sends request to change layout type for the current meeting for the specific participant/device only\n   * @param {String} layoutType a layout type that should be available in meeting constants LAYOUT_TYPES\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  changeVideoLayout(layoutType) {\n    const reject = (message) => {\n      LoggerProxy.logger.error(message);\n\n      return Promise.reject(new Error(message));\n    };\n\n    const {mediaDirection, remoteVideoTrack} = this.mediaProperties;\n\n    // TODO: We need a real time value for Audio, Video and Share send indicator\n    if (mediaDirection.receiveVideo === true && remoteVideoTrack) {\n      if (LAYOUT_TYPES.includes(layoutType)) {\n        return this.meetingRequest\n          .changeVideoLayout({\n            locusUrl: this.locusInfo.self.url,\n            deviceUrl: this.deviceUrl,\n            layoutType\n          })\n          .then((response) => {\n            if (response && response.body && response.body.locus) {\n              this.locusInfo.onFullLocus(response.body.locus);\n            }\n          });\n      }\n\n      return reject('Meeting:index#changeVideoLayout --> cannot change video layout, invalid layoutType recieved.');\n    }\n\n    return reject('Meeting:index#changeVideoLayout --> cannot change video layout, you are not recieving any video/share stream');\n  }\n\n  /**\n   * Sets the quality of the local video stream\n   * @param {String} level {LOW|MEDIUM|HIGH}\n   * @returns {Promise}\n   */\n  setLocalVideoQuality(level) {\n    LoggerProxy.logger.log(`Meeting:index#setLocalVideoQuality --> Setting quality to ${level}`);\n\n    if (!VIDEO_RESOLUTIONS[level]) {\n      const errorMessage = `Meeting:index#setLocalVideoQuality --> ${level} not defined`;\n\n      LoggerProxy.logger.error(errorMessage);\n\n      return Promise.reject(new Error(errorMessage));\n    }\n\n    if (!this.mediaProperties.mediaDirection.sendVideo) {\n      const errorMessage = 'Meeting:index#setLocalVideoQuality --> unable to change video quality, sendVideo is disabled';\n\n      LoggerProxy.logger.error(errorMessage);\n\n      return Promise.reject(new Error(errorMessage));\n    }\n\n    // If level is already the same, don't do anything\n    if (level === this.mediaProperties.localQualityLevel) {\n      LoggerProxy.logger.warn(`Meeting:index#setLocalQualityLevel --> Quality already set to ${level}`);\n\n      return Promise.resolve();\n    }\n\n    // Set the quality level in properties\n    this.mediaProperties.setLocalQualityLevel(level);\n\n    const mediaDirection = {\n      sendAudio: this.mediaProperties.mediaDirection.sendAudio,\n      sendVideo: this.mediaProperties.mediaDirection.sendVideo,\n      sendShare: this.mediaProperties.mediaDirection.sendShare\n    };\n\n    return this.getMediaStreams(mediaDirection, VIDEO_RESOLUTIONS[level])\n      .then(([localStream]) =>\n        this.updateVideo({\n          sendVideo: true,\n          receiveVideo: true,\n          stream: localStream\n        }));\n  }\n\n  /**\n   * Sets the quality level of the remote incoming media\n   * @param {String} level {LOW|MEDIUM|HIGH}\n   * @returns {Promise}\n   */\n  setRemoteQualityLevel(level) {\n    LoggerProxy.logger.log(`Meeting:index#setRemoteQualityLevel --> Setting quality to ${level}`);\n\n    if (!QUALITY_LEVELS[level]) {\n      const errorMessage = `Meeting:index#setRemoteQualityLevel --> ${level} not defined`;\n\n      LoggerProxy.logger.error(errorMessage);\n\n      return Promise.reject(new Error(errorMessage));\n    }\n\n    if (!this.mediaProperties.mediaDirection.receiveAudio && !this.mediaProperties.mediaDirection.receiveVideo) {\n      const errorMessage = 'Meeting:index#setRemoteQualityLevel --> unable to change remote quality, receiveVideo and receiveAudio is disabled';\n\n      LoggerProxy.logger.error(errorMessage);\n\n      return Promise.reject(new Error(errorMessage));\n    }\n\n    // If level is already the same, don't do anything\n    if (level === this.mediaProperties.remoteQualityLevel) {\n      LoggerProxy.logger.warn(`Meeting:index#setRemoteQualityLevel --> Quality already set to ${level}`);\n\n      return Promise.resolve();\n    }\n\n    // Set the quality level in properties\n    this.mediaProperties.setRemoteQualityLevel(level);\n\n    return this.updateMedia({mediaSettings: this.mediaProperties.mediaDirection});\n  }\n\n  /**\n   * Sets the quality level of all meeting media (incoming/outgoing)\n   * @param {String} level {LOW|MEDIUM|HIGH}\n   * @returns {Promise}\n   */\n  setMeetingQuality(level) {\n    LoggerProxy.logger.log(`Meeting:index#setMeetingQuality --> Setting quality to ${level}`);\n\n    if (!QUALITY_LEVELS[level]) {\n      const errorMessage = `Meeting:index#setMeetingQuality --> ${level} not defined`;\n\n      LoggerProxy.logger.error(errorMessage);\n\n      return Promise.reject(new Error(errorMessage));\n    }\n\n    const previousLevel = {\n      local: this.mediaProperties.localQualityLevel,\n      remote: this.mediaProperties.remoteQualityLevel\n    };\n\n    // If level is already the same, don't do anything\n    if (\n      level === this.mediaProperties.localQualityLevel &&\n      level === this.mediaProperties.remoteQualityLevel\n    ) {\n      LoggerProxy.logger.warn(`Meeting:index#setMeetingQuality --> Quality already set to ${level}`);\n\n      return Promise.resolve();\n    }\n\n    // Determine the direction of our current media\n    const {receiveAudio, receiveVideo, sendVideo} = this.mediaProperties.mediaDirection;\n\n    return (sendVideo ? this.setLocalVideoQuality(level) : Promise.resolve())\n      .then(() =>\n        ((receiveAudio || receiveVideo) ?\n          this.setRemoteQualityLevel(level) :\n          Promise.resolve()))\n      .catch((error) => {\n        // From troubleshooting it seems that the stream itself doesn't change the max-fs if the peer connection isn't stable\n        this.mediaProperties.setLocalQualityLevel(previousLevel.local);\n        this.mediaProperties.setRemoteQualityLevel(previousLevel.remote);\n\n        LoggerProxy.logger.error(`Meeting:index#setMeetingQuality --> ${error.message}`);\n\n        return Promise.reject(error);\n      });\n  }\n\n  /**\n  * @param {Object} options parameter\n  * @param {Boolean} options.sendAudio send audio from the display share\n  * @param {Boolean} options.sendShare send video from the display share\n  * @param {Object} options.sharePreferences\n  * @param {MediaTrackConstraints} options.sharePreferences.shareConstraints constraints to apply to video\n  *   @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints}\n  * @param {Boolean} options.sharePreferences.highFrameRate if shareConstraints isn't provided, set default values based off of this boolean\n  * @returns {Promise.<MediaStream>}\n  */\n  shareScreen(options = {}) {\n    LoggerProxy.logger.log('Meeting:index#shareScreen --> Getting local share');\n\n    const shareConstraints = {\n      sendShare: true,\n      sendAudio: false,\n      ...options\n    };\n\n    return Media.getDisplayMedia(shareConstraints, this.config)\n      .then((shareStream) => {\n        this.updateShare({\n          sendShare: true,\n          receiveShare: this.mediaProperties.mediaDirection.receiveShare,\n          stream: shareStream\n        });\n      })\n      .catch((error) => {\n        // Whenever there is a failure when trying to access a user's display\n        // report it as an operational metric\n        // This gives visibility into common errors and can help\n        // with further troubleshooting\n        const metricName = METRICS_OPERATIONAL_MEASURES.GET_DISPLAY_MEDIA_FAILURE;\n        const data = {\n          correlation_id: this.correlationId,\n          locus_id: this.locusUrl.split('/').pop(),\n          reason: error.message\n        };\n        const metadata = {\n          type: error.name\n        };\n\n        Metrics.sendOperationalMetric(metricName, data, metadata);\n        throw new MediaError('Unable to retrieve display media stream', error);\n      });\n  }\n}\n"]}