'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createReplyEditActivity = exports.createEditActivity = exports.createReplyActivity = exports.createRootActivity = exports.determineActivityType = exports.getIsActivityOrphaned = exports.sanitizeActivity = exports.isDeleteActivity = exports.isCreateActivity = exports.isEditActivity = exports.isReplyActivity = exports.isRootActivity = exports.getParentId = exports.sortActivitiesByPublishedDate = exports.isNewer = exports.getPublishedDate = exports.getActivityType = exports.ACTIVITY_TYPES = exports.INITIAL = exports.MID = exports.NEWER = exports.OLDER = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _sortBy2 = require('lodash/sortBy');

var _sortBy3 = _interopRequireDefault(_sortBy2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var OLDER = exports.OLDER = 'older';
var NEWER = exports.NEWER = 'newer';
var MID = exports.MID = 'mid';
var INITIAL = exports.INITIAL = 'initial';

var ACTIVITY_TYPES = exports.ACTIVITY_TYPES = {
  REPLY: 'REPLY',
  EDIT: 'EDIT',
  REACTION: 'REACTION',
  REACTION_SELF: 'REACTION_SELF',
  ROOT: 'ROOT',
  CREATE: 'CREATE',
  TOMBSTONE: 'TOMBSTONE',
  DELETE: 'DELETE',
  REPLY_EDIT: 'REPLY_EDIT'
};

var REPLY = 'reply';
var EDIT = 'edit';
var REACTION_SUMMARY = 'reactionSummary';
var REACTION_SELF_SUMMARY = 'reactionSelfSummary';
var CREATE = 'create';
var TOMBSTONE = 'tombstone';
var DELETE = 'delete';
var ADD = 'add';

var getActivityType = exports.getActivityType = function getActivityType(activity) {
  if (activity.activityType === REPLY) {
    return ACTIVITY_TYPES.REPLY;
  }
  if (activity.parent && activity.parent.type === EDIT) {
    return ACTIVITY_TYPES.EDIT;
  }
  if (activity.verb === ADD || activity.type === REACTION_SUMMARY) {
    return ACTIVITY_TYPES.REACTION;
  }
  if (activity.type === REACTION_SELF_SUMMARY) {
    return ACTIVITY_TYPES.REACTION_SELF;
  }
  if (activity.verb === CREATE) {
    return ACTIVITY_TYPES.CREATE;
  }
  if (activity.verb === TOMBSTONE) {
    return ACTIVITY_TYPES.TOMBSTONE;
  }
  if (activity.verb === DELETE) {
    return ACTIVITY_TYPES.DELETE;
  }

  return ACTIVITY_TYPES.ROOT;
};

var getPublishedDate = exports.getPublishedDate = function getPublishedDate() {
  var activity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return new Date(activity.published).getTime();
};

/**
 * @param {Object} activity1
 * @param {Object} activity2
 * @returns {boolean} true if first activity is newer than second
 */
var isNewer = exports.isNewer = function isNewer(activity1, activity2) {
  return getPublishedDate(activity1) > getPublishedDate(activity2);
};

var sortActivitiesByPublishedDate = exports.sortActivitiesByPublishedDate = function sortActivitiesByPublishedDate(activities) {
  return (0, _sortBy3.default)(activities, function (activity) {
    return getPublishedDate(activity);
  });
};

var getParentId = exports.getParentId = function getParentId(activity) {
  return activity && activity.parent && activity.parent.id;
};

var isRootActivity = exports.isRootActivity = function isRootActivity(act) {
  return getActivityType(act) === ACTIVITY_TYPES.ROOT;
};
var isReplyActivity = exports.isReplyActivity = function isReplyActivity(act) {
  return getActivityType(act) === ACTIVITY_TYPES.REPLY;
};
var isEditActivity = exports.isEditActivity = function isEditActivity(act) {
  return getActivityType(act) === ACTIVITY_TYPES.EDIT;
};
var isCreateActivity = exports.isCreateActivity = function isCreateActivity(act) {
  return getActivityType(act) === ACTIVITY_TYPES.CREATE;
};
var isDeleteActivity = exports.isDeleteActivity = function isDeleteActivity(act) {
  return getActivityType(act) === ACTIVITY_TYPES.DELETE;
};

var sanitizeActivity = exports.sanitizeActivity = function sanitizeActivity(activity) {
  var final = (0, _extends3.default)({}, activity);

  final.reaction = activity.reaction || {};
  final.reactionSelf = activity.reactionSelf || {};

  // replies will be spread in order beneath parent, no need to include on final objects
  delete final.replies;

  return final;
};

var getIsActivityOrphaned = exports.getIsActivityOrphaned = function getIsActivityOrphaned(activity, activities) {
  return activity.parent && activity.parent.id && !activities[activity.parent.id];
};

var getIsReplyEditActivity = function getIsReplyEditActivity(activity, activities) {
  var parentId = activity.parent.id;
  var parentActivity = activities[parentId];

  return parentActivity && isReplyActivity(parentActivity);
};

var determineActivityType = exports.determineActivityType = function determineActivityType(activity, activities) {
  var initialType = getActivityType(activity);

  // edits to a reply, while they are replies themselves, appear in every way as edits
  // the only way to dermine their status as an edited reply is to find the original reply
  if (initialType === ACTIVITY_TYPES.EDIT) {
    var isReplyEditActivity = getIsReplyEditActivity(activity, activities);

    return isReplyEditActivity ? ACTIVITY_TYPES.REPLY_EDIT : initialType;
  }

  return initialType;
};

var createRootActivity = exports.createRootActivity = function createRootActivity(activity) {
  return activity;
};

var createReplyActivity = exports.createReplyActivity = function createReplyActivity(activity) {
  var replyAct = (0, _extends3.default)({}, activity, {
    replyParent: activity.parent
  });

  return replyAct;
};

var createEditActivity = exports.createEditActivity = function createEditActivity(editActivity, activities) {
  var editActParentObj = editActivity.parent;
  var parentId = editActParentObj.id;
  var parentAct = activities[parentId];

  var joinedEditAct = (0, _extends3.default)({}, parentAct, {
    parent: editActParentObj,
    editParent: editActParentObj,
    object: editActivity.object,
    published: editActivity.published
  });

  return joinedEditAct;
};

// takes an edit activity whose parent is a reply activity
var createReplyEditActivity = exports.createReplyEditActivity = function createReplyEditActivity(editActivity, activities) {
  var editActParentObj = editActivity.parent;
  var parentId = editActParentObj.id;
  var parentReplyAct = activities[parentId];

  var joinedReplyEditActivity = (0, _extends3.default)({}, parentReplyAct, {
    parent: editActParentObj,
    editParent: editActParentObj,
    replyParent: parentReplyAct.parent,
    object: editActivity.object,
    published: editActivity.published
  });

  return joinedReplyEditActivity;
};
//# sourceMappingURL=activities.js.map
