{"version":3,"sources":["activities.js"],"names":["OLDER","NEWER","MID","INITIAL","ACTIVITY_TYPES","REPLY","EDIT","REACTION","REACTION_SELF","ROOT","CREATE","TOMBSTONE","DELETE","REPLY_EDIT","REACTION_SUMMARY","REACTION_SELF_SUMMARY","ADD","getActivityType","activity","activityType","parent","type","verb","getPublishedDate","Date","published","getTime","isNewer","activity1","activity2","sortActivitiesByPublishedDate","activities","getParentId","id","isRootActivity","act","isReplyActivity","isEditActivity","isCreateActivity","isDeleteActivity","sanitizeActivity","final","reaction","reactionSelf","replies","getIsActivityOrphaned","getIsReplyEditActivity","parentId","parentActivity","determineActivityType","initialType","isReplyEditActivity","createRootActivity","createReplyActivity","replyAct","replyParent","createEditActivity","editActivity","editActParentObj","parentAct","joinedEditAct","editParent","object","createReplyEditActivity","parentReplyAct","joinedReplyEditActivity"],"mappings":";;;;;;;;;;;;;;;;;AAEO,IAAMA,wBAAQ,OAAd;AACA,IAAMC,wBAAQ,OAAd;AACA,IAAMC,oBAAM,KAAZ;AACA,IAAMC,4BAAU,SAAhB;;AAEA,IAAMC,0CAAiB;AAC5BC,SAAO,OADqB;AAE5BC,QAAM,MAFsB;AAG5BC,YAAU,UAHkB;AAI5BC,iBAAe,eAJa;AAK5BC,QAAM,MALsB;AAM5BC,UAAQ,QANoB;AAO5BC,aAAW,WAPiB;AAQ5BC,UAAQ,QARoB;AAS5BC,cAAY;AATgB,CAAvB;;AAYP,IAAMR,QAAQ,OAAd;AACA,IAAMC,OAAO,MAAb;AACA,IAAMQ,mBAAmB,iBAAzB;AACA,IAAMC,wBAAwB,qBAA9B;AACA,IAAML,SAAS,QAAf;AACA,IAAMC,YAAY,WAAlB;AACA,IAAMC,SAAS,QAAf;AACA,IAAMI,MAAM,KAAZ;;AAEO,IAAMC,4CAAkB,SAAlBA,eAAkB,CAACC,QAAD,EAAc;AAC3C,MAAIA,SAASC,YAAT,KAA0Bd,KAA9B,EAAqC;AACnC,WAAOD,eAAeC,KAAtB;AACD;AACD,MAAIa,SAASE,MAAT,IAAmBF,SAASE,MAAT,CAAgBC,IAAhB,KAAyBf,IAAhD,EAAsD;AACpD,WAAOF,eAAeE,IAAtB;AACD;AACD,MAAIY,SAASI,IAAT,KAAkBN,GAAlB,IAAyBE,SAASG,IAAT,KAAkBP,gBAA/C,EAAiE;AAC/D,WAAOV,eAAeG,QAAtB;AACD;AACD,MAAIW,SAASG,IAAT,KAAkBN,qBAAtB,EAA6C;AAC3C,WAAOX,eAAeI,aAAtB;AACD;AACD,MAAIU,SAASI,IAAT,KAAkBZ,MAAtB,EAA8B;AAC5B,WAAON,eAAeM,MAAtB;AACD;AACD,MAAIQ,SAASI,IAAT,KAAkBX,SAAtB,EAAiC;AAC/B,WAAOP,eAAeO,SAAtB;AACD;AACD,MAAIO,SAASI,IAAT,KAAkBV,MAAtB,EAA8B;AAC5B,WAAOR,eAAeQ,MAAtB;AACD;;AAED,SAAOR,eAAeK,IAAtB;AACD,CAxBM;;AA0BA,IAAMc,8CAAmB,SAAnBA,gBAAmB;AAAA,MAACL,QAAD,uEAAY,EAAZ;AAAA,SAAmB,IAAIM,IAAJ,CAASN,SAASO,SAAlB,EAA6BC,OAA7B,EAAnB;AAAA,CAAzB;;AAEP;;;;;AAKO,IAAMC,4BAAU,SAAVA,OAAU,CAACC,SAAD,EAAYC,SAAZ;AAAA,SAA0BN,iBAAiBK,SAAjB,IAA8BL,iBAAiBM,SAAjB,CAAxD;AAAA,CAAhB;;AAEA,IAAMC,wEAAgC,SAAhCA,6BAAgC,CAACC,UAAD;AAAA,SAAgB,sBAAOA,UAAP,EAAmB,UAACb,QAAD;AAAA,WAAcK,iBAAiBL,QAAjB,CAAd;AAAA,GAAnB,CAAhB;AAAA,CAAtC;;AAEA,IAAMc,oCAAc,SAAdA,WAAc,CAACd,QAAD;AAAA,SAAcA,YAAYA,SAASE,MAArB,IAA+BF,SAASE,MAAT,CAAgBa,EAA7D;AAAA,CAApB;;AAEA,IAAMC,0CAAiB,SAAjBA,cAAiB,CAACC,GAAD;AAAA,SAASlB,gBAAgBkB,GAAhB,MAAyB/B,eAAeK,IAAjD;AAAA,CAAvB;AACA,IAAM2B,4CAAkB,SAAlBA,eAAkB,CAACD,GAAD;AAAA,SAASlB,gBAAgBkB,GAAhB,MAAyB/B,eAAeC,KAAjD;AAAA,CAAxB;AACA,IAAMgC,0CAAiB,SAAjBA,cAAiB,CAACF,GAAD;AAAA,SAASlB,gBAAgBkB,GAAhB,MAAyB/B,eAAeE,IAAjD;AAAA,CAAvB;AACA,IAAMgC,8CAAmB,SAAnBA,gBAAmB,CAACH,GAAD;AAAA,SAASlB,gBAAgBkB,GAAhB,MAAyB/B,eAAeM,MAAjD;AAAA,CAAzB;AACA,IAAM6B,8CAAmB,SAAnBA,gBAAmB,CAACJ,GAAD;AAAA,SAASlB,gBAAgBkB,GAAhB,MAAyB/B,eAAeQ,MAAjD;AAAA,CAAzB;;AAEA,IAAM4B,8CAAmB,SAAnBA,gBAAmB,CAACtB,QAAD,EAAc;AAC5C,MAAMuB,mCAAYvB,QAAZ,CAAN;;AAEAuB,QAAMC,QAAN,GAAiBxB,SAASwB,QAAT,IAAqB,EAAtC;AACAD,QAAME,YAAN,GAAqBzB,SAASyB,YAAT,IAAyB,EAA9C;;AAEA;AACA,SAAOF,MAAMG,OAAb;;AAEA,SAAOH,KAAP;AACD,CAVM;;AAYA,IAAMI,wDAAwB,SAAxBA,qBAAwB,CAAC3B,QAAD,EAAWa,UAAX;AAAA,SAA0Bb,SAASE,MAAT,IAAmBF,SAASE,MAAT,CAAgBa,EAAnC,IAAyC,CAACF,WAAWb,SAASE,MAAT,CAAgBa,EAA3B,CAApE;AAAA,CAA9B;;AAEP,IAAMa,yBAAyB,SAAzBA,sBAAyB,CAAC5B,QAAD,EAAWa,UAAX,EAA0B;AACvD,MAAMgB,WAAW7B,SAASE,MAAT,CAAgBa,EAAjC;AACA,MAAMe,iBAAiBjB,WAAWgB,QAAX,CAAvB;;AAEA,SAAOC,kBAAkBZ,gBAAgBY,cAAhB,CAAzB;AACD,CALD;;AAOO,IAAMC,wDAAwB,SAAxBA,qBAAwB,CAAC/B,QAAD,EAAWa,UAAX,EAA0B;AAC7D,MAAMmB,cAAcjC,gBAAgBC,QAAhB,CAApB;;AAEA;AACA;AACA,MAAIgC,gBAAgB9C,eAAeE,IAAnC,EAAyC;AACvC,QAAM6C,sBAAsBL,uBAAuB5B,QAAvB,EAAiCa,UAAjC,CAA5B;;AAEA,WAAOoB,sBAAsB/C,eAAeS,UAArC,GAAkDqC,WAAzD;AACD;;AAED,SAAOA,WAAP;AACD,CAZM;;AAcA,IAAME,kDAAqB,SAArBA,kBAAqB,CAAClC,QAAD;AAAA,SAAcA,QAAd;AAAA,CAA3B;;AAEA,IAAMmC,oDAAsB,SAAtBA,mBAAsB,CAACnC,QAAD,EAAc;AAC/C,MAAMoC,sCACDpC,QADC;AAEJqC,iBAAarC,SAASE;AAFlB,IAAN;;AAKA,SAAOkC,QAAP;AACD,CAPM;;AASA,IAAME,kDAAqB,SAArBA,kBAAqB,CAACC,YAAD,EAAe1B,UAAf,EAA8B;AAC9D,MAAM2B,mBAAmBD,aAAarC,MAAtC;AACA,MAAM2B,WAAWW,iBAAiBzB,EAAlC;AACA,MAAM0B,YAAY5B,WAAWgB,QAAX,CAAlB;;AAEA,MAAMa,2CACDD,SADC;AAEJvC,YAAQsC,gBAFJ;AAGJG,gBAAYH,gBAHR;AAIJI,YAAQL,aAAaK,MAJjB;AAKJrC,eAAWgC,aAAahC;AALpB,IAAN;;AAQA,SAAOmC,aAAP;AACD,CAdM;;AAgBP;AACO,IAAMG,4DAA0B,SAA1BA,uBAA0B,CAACN,YAAD,EAAe1B,UAAf,EAA8B;AACnE,MAAM2B,mBAAmBD,aAAarC,MAAtC;AACA,MAAM2B,WAAWW,iBAAiBzB,EAAlC;AACA,MAAM+B,iBAAiBjC,WAAWgB,QAAX,CAAvB;;AAEA,MAAMkB,qDACDD,cADC;AAEJ5C,YAAQsC,gBAFJ;AAGJG,gBAAYH,gBAHR;AAIJH,iBAAaS,eAAe5C,MAJxB;AAKJ0C,YAAQL,aAAaK,MALjB;AAMJrC,eAAWgC,aAAahC;AANpB,IAAN;;AASA,SAAOwC,uBAAP;AACD,CAfM","file":"activities.js","sourcesContent":["import {sortBy} from 'lodash';\n\nexport const OLDER = 'older';\nexport const NEWER = 'newer';\nexport const MID = 'mid';\nexport const INITIAL = 'initial';\n\nexport const ACTIVITY_TYPES = {\n  REPLY: 'REPLY',\n  EDIT: 'EDIT',\n  REACTION: 'REACTION',\n  REACTION_SELF: 'REACTION_SELF',\n  ROOT: 'ROOT',\n  CREATE: 'CREATE',\n  TOMBSTONE: 'TOMBSTONE',\n  DELETE: 'DELETE',\n  REPLY_EDIT: 'REPLY_EDIT'\n};\n\nconst REPLY = 'reply';\nconst EDIT = 'edit';\nconst REACTION_SUMMARY = 'reactionSummary';\nconst REACTION_SELF_SUMMARY = 'reactionSelfSummary';\nconst CREATE = 'create';\nconst TOMBSTONE = 'tombstone';\nconst DELETE = 'delete';\nconst ADD = 'add';\n\nexport const getActivityType = (activity) => {\n  if (activity.activityType === REPLY) {\n    return ACTIVITY_TYPES.REPLY;\n  }\n  if (activity.parent && activity.parent.type === EDIT) {\n    return ACTIVITY_TYPES.EDIT;\n  }\n  if (activity.verb === ADD || activity.type === REACTION_SUMMARY) {\n    return ACTIVITY_TYPES.REACTION;\n  }\n  if (activity.type === REACTION_SELF_SUMMARY) {\n    return ACTIVITY_TYPES.REACTION_SELF;\n  }\n  if (activity.verb === CREATE) {\n    return ACTIVITY_TYPES.CREATE;\n  }\n  if (activity.verb === TOMBSTONE) {\n    return ACTIVITY_TYPES.TOMBSTONE;\n  }\n  if (activity.verb === DELETE) {\n    return ACTIVITY_TYPES.DELETE;\n  }\n\n  return ACTIVITY_TYPES.ROOT;\n};\n\nexport const getPublishedDate = (activity = {}) => new Date(activity.published).getTime();\n\n/**\n * @param {Object} activity1\n * @param {Object} activity2\n * @returns {boolean} true if first activity is newer than second\n */\nexport const isNewer = (activity1, activity2) => getPublishedDate(activity1) > getPublishedDate(activity2);\n\nexport const sortActivitiesByPublishedDate = (activities) => sortBy(activities, (activity) => getPublishedDate(activity));\n\nexport const getParentId = (activity) => activity && activity.parent && activity.parent.id;\n\nexport const isRootActivity = (act) => getActivityType(act) === ACTIVITY_TYPES.ROOT;\nexport const isReplyActivity = (act) => getActivityType(act) === ACTIVITY_TYPES.REPLY;\nexport const isEditActivity = (act) => getActivityType(act) === ACTIVITY_TYPES.EDIT;\nexport const isCreateActivity = (act) => getActivityType(act) === ACTIVITY_TYPES.CREATE;\nexport const isDeleteActivity = (act) => getActivityType(act) === ACTIVITY_TYPES.DELETE;\n\nexport const sanitizeActivity = (activity) => {\n  const final = {...activity};\n\n  final.reaction = activity.reaction || {};\n  final.reactionSelf = activity.reactionSelf || {};\n\n  // replies will be spread in order beneath parent, no need to include on final objects\n  delete final.replies;\n\n  return final;\n};\n\nexport const getIsActivityOrphaned = (activity, activities) => activity.parent && activity.parent.id && !activities[activity.parent.id];\n\nconst getIsReplyEditActivity = (activity, activities) => {\n  const parentId = activity.parent.id;\n  const parentActivity = activities[parentId];\n\n  return parentActivity && isReplyActivity(parentActivity);\n};\n\nexport const determineActivityType = (activity, activities) => {\n  const initialType = getActivityType(activity);\n\n  // edits to a reply, while they are replies themselves, appear in every way as edits\n  // the only way to dermine their status as an edited reply is to find the original reply\n  if (initialType === ACTIVITY_TYPES.EDIT) {\n    const isReplyEditActivity = getIsReplyEditActivity(activity, activities);\n\n    return isReplyEditActivity ? ACTIVITY_TYPES.REPLY_EDIT : initialType;\n  }\n\n  return initialType;\n};\n\nexport const createRootActivity = (activity) => activity;\n\nexport const createReplyActivity = (activity) => {\n  const replyAct = {\n    ...activity,\n    replyParent: activity.parent\n  };\n\n  return replyAct;\n};\n\nexport const createEditActivity = (editActivity, activities) => {\n  const editActParentObj = editActivity.parent;\n  const parentId = editActParentObj.id;\n  const parentAct = activities[parentId];\n\n  const joinedEditAct = {\n    ...parentAct,\n    parent: editActParentObj,\n    editParent: editActParentObj,\n    object: editActivity.object,\n    published: editActivity.published\n  };\n\n  return joinedEditAct;\n};\n\n// takes an edit activity whose parent is a reply activity\nexport const createReplyEditActivity = (editActivity, activities) => {\n  const editActParentObj = editActivity.parent;\n  const parentId = editActParentObj.id;\n  const parentReplyAct = activities[parentId];\n\n  const joinedReplyEditActivity = {\n    ...parentReplyAct,\n    parent: editActParentObj,\n    editParent: editActParentObj,\n    replyParent: parentReplyAct.parent,\n    object: editActivity.object,\n    published: editActivity.published\n  };\n\n  return joinedReplyEditActivity;\n};\n"]}