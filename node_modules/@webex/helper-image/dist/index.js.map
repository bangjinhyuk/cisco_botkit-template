{"version":3,"sources":["index.js"],"names":["file","buf","type","mimeType","parse","translateValues","exifData","Orientation","ExifImageHeight","ExifImageWidth","orientation","exifHeight","exifWidth","image","readExifData","updateImageOrientation","orient","default","require","Buffer","options","resolve","reader","FileReader","readAsArrayBuffer","onload","arrayBuffer","result","from","then","shouldNotAddExifData","width","height","ctx","img","x","y","transform","drawImage"],"mappings":"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","file":"index.js","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint no-unused-vars: [\"error\", { \"vars\": \"local\" }] */\n/* global Uint8Array, FileReader */\n\nconst {Buffer} = require('safe-buffer');\nconst {parse} = require('exifr/dist/lite.umd');\n\n/**\n* Updates the image file with exif information, required to correctly rotate the image activity\n* @param {Object} file\n* @param {Object} options\n* @param {boolean} options.shouldNotAddExifData\n* @returns {Promise<Object>}\n*/\nexport function updateImageOrientation(file, options = {}) {\n  return new Promise((resolve) => {\n    const reader = new FileReader();\n\n    reader.readAsArrayBuffer(file);\n    reader.onload = function onload() {\n      const arrayBuffer = reader.result;\n      const buf = Buffer.from(arrayBuffer);\n\n      resolve(buf);\n    };\n  })\n    .then((buf) => {\n      if (options.shouldNotAddExifData) {\n        return buf;\n      }\n\n      return readExifData(file, buf);\n    });\n}\n\n/**\n* Adds exif orientation information on the image file\n* @param {Object} file\n* @param {Object} buf\n* @returns {Promise<ExifImage>}\n*/\nexport async function readExifData(file, buf) {\n  // For avatar images the file.type is set as image/jpeg, however for images shared in an activity file.mimeType is set as image/jpeg. Handling both conditions.\n  if (\n    file &&\n    (file.type === 'image/jpeg' || file.mimeType === 'image/jpeg')\n  ) {\n    const exifData = await parse(buf, {translateValues: false});\n\n    if (exifData) {\n      const {Orientation, ExifImageHeight, ExifImageWidth} = exifData;\n\n      file.orientation = Orientation;\n      file.exifHeight = ExifImageHeight;\n      file.exifWidth = ExifImageWidth;\n\n      if (file.image) {\n        file.image.orientation = Orientation;\n      }\n    }\n  }\n\n  return buf;\n}\n\n/* eslint-disable complexity */\n/**\n* Rotates/flips the image on the canvas as per exif information\n* @param {Object} options(orientation: image exif orientation range from 1-8, img: Image object, x: start x-axis, y: start y-axis, width: width of the thumbnail, height: height of the thumbnail, ctx: canvas context)\n* @param {Object} file\n* @returns {Object}\n*/\nexport function orient(options, file) {\n  const {\n    width, height, ctx, img, orientation, x, y\n  } = options;\n\n  if (file && file.orientation && file.orientation !== 1) {\n    // explanation of orientation:\n    // https://stackoverflow.com/questions/20600800/js-client-side-exif-orientation-rotate-and-mirror-jpeg-images\n    switch (orientation) {\n      case 2:\n        // flip\n        ctx.transform(-1, 0, 0, 1, width, 0);\n        break;\n      case 3:\n      // rotateImage180\n        ctx.transform(-1, 0, 0, -1, width, height);\n        break;\n      case 4:\n      // rotate180AndFlipImage\n        ctx.transform(1, 0, 0, -1, 0, height);\n        break;\n      case 5:\n      // rotate90AndFlipImage\n        ctx.transform(0, 1, 1, 0, 0, 0);\n        break;\n      case 6:\n      // rotateImage90\n        ctx.transform(0, 1, -1, 0, height, 0);\n        break;\n      case 7:\n      // rotateNeg90AndFlipImage\n        ctx.transform(0, -1, -1, 0, height, width);\n        break;\n      case 8:\n      // rotateNeg90\n        ctx.transform(0, -1, 1, 0, 0, width);\n        break;\n      default:\n        break;\n    }\n  }\n  ctx.drawImage(img, x, y, width, height);\n}\n/* eslint-enable complexity */\n\nexport {default as processImage} from './process-image';\nexport {default as detectFileType} from './detect-filetype';\n"]}