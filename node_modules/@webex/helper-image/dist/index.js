'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.detectFileType = exports.processImage = exports.readExifData = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

/**
* Adds exif orientation information on the image file
* @param {Object} file
* @param {Object} buf
* @returns {Promise<ExifImage>}
*/
var readExifData = exports.readExifData = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(file, buf) {
    var exifData, Orientation, ExifImageHeight, ExifImageWidth;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(file && (file.type === 'image/jpeg' || file.mimeType === 'image/jpeg'))) {
              _context.next = 5;
              break;
            }

            _context.next = 3;
            return parse(buf, { translateValues: false });

          case 3:
            exifData = _context.sent;


            if (exifData) {
              Orientation = exifData.Orientation, ExifImageHeight = exifData.ExifImageHeight, ExifImageWidth = exifData.ExifImageWidth;


              file.orientation = Orientation;
              file.exifHeight = ExifImageHeight;
              file.exifWidth = ExifImageWidth;

              if (file.image) {
                file.image.orientation = Orientation;
              }
            }

          case 5:
            return _context.abrupt('return', buf);

          case 6:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function readExifData(_x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

/* eslint-disable complexity */
/**
* Rotates/flips the image on the canvas as per exif information
* @param {Object} options(orientation: image exif orientation range from 1-8, img: Image object, x: start x-axis, y: start y-axis, width: width of the thumbnail, height: height of the thumbnail, ctx: canvas context)
* @param {Object} file
* @returns {Object}
*/


exports.updateImageOrientation = updateImageOrientation;
exports.orient = orient;

var _processImage = require('./process-image');

Object.defineProperty(exports, 'processImage', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_processImage).default;
  }
});

var _detectFiletype = require('./detect-filetype');

Object.defineProperty(exports, 'detectFileType', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_detectFiletype).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */

/* eslint no-unused-vars: ["error", { "vars": "local" }] */
/* global Uint8Array, FileReader */

var _require = require('safe-buffer'),
    Buffer = _require.Buffer;

var _require2 = require('exifr/dist/lite.umd'),
    parse = _require2.parse;

/**
* Updates the image file with exif information, required to correctly rotate the image activity
* @param {Object} file
* @param {Object} options
* @param {boolean} options.shouldNotAddExifData
* @returns {Promise<Object>}
*/


function updateImageOrientation(file) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return new _promise2.default(function (resolve) {
    var reader = new FileReader();

    reader.readAsArrayBuffer(file);
    reader.onload = function onload() {
      var arrayBuffer = reader.result;
      var buf = Buffer.from(arrayBuffer);

      resolve(buf);
    };
  }).then(function (buf) {
    if (options.shouldNotAddExifData) {
      return buf;
    }

    return readExifData(file, buf);
  });
}function orient(options, file) {
  var width = options.width,
      height = options.height,
      ctx = options.ctx,
      img = options.img,
      orientation = options.orientation,
      x = options.x,
      y = options.y;


  if (file && file.orientation && file.orientation !== 1) {
    // explanation of orientation:
    // https://stackoverflow.com/questions/20600800/js-client-side-exif-orientation-rotate-and-mirror-jpeg-images
    switch (orientation) {
      case 2:
        // flip
        ctx.transform(-1, 0, 0, 1, width, 0);
        break;
      case 3:
        // rotateImage180
        ctx.transform(-1, 0, 0, -1, width, height);
        break;
      case 4:
        // rotate180AndFlipImage
        ctx.transform(1, 0, 0, -1, 0, height);
        break;
      case 5:
        // rotate90AndFlipImage
        ctx.transform(0, 1, 1, 0, 0, 0);
        break;
      case 6:
        // rotateImage90
        ctx.transform(0, 1, -1, 0, height, 0);
        break;
      case 7:
        // rotateNeg90AndFlipImage
        ctx.transform(0, -1, -1, 0, height, width);
        break;
      case 8:
        // rotateNeg90
        ctx.transform(0, -1, 1, 0, 0, width);
        break;
      default:
        break;
    }
  }
  ctx.drawImage(img, x, y, width, height);
}
/* eslint-enable complexity */
//# sourceMappingURL=index.js.map
