{"version":3,"sources":["uuid-utils.js"],"names":["constructHydraId","deconstructHydraId","buildHydraMessageId","buildHydraPersonId","buildHydraRoomId","buildHydraOrgId","buildHydraMembershipId","getHydraClusterString","getHydraRoomType","getHydraFiles","hydraBaseUrl","isRequired","Error","type","id","cluster","toUpperCase","hydraTypes","PEOPLE","ORGANIZATION","payload","split","pop","uuid","MESSAGE","ROOM","personUUID","spaceUUID","MEMBERSHIP","webex","conversationUrl","internalClusterString","internal","services","getClusterId","startsWith","INTERNAL_US_CLUSTER_NAME","INTERNAL_US_INTEGRATION_CLUSTER_NAME","clusterParts","length","tags","includes","SDK_EVENT","INTERNAL","ACTIVITY_TAG","ONE_ON_ONE","EXTERNAL","SPACE_TYPE","DIRECT","GROUP","activity","hydraFiles","files","object","items","i","contentId","CONTENT","push"],"mappings":"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","file":"uuid-utils.js","sourcesContent":["import {encode, decode} from './base64';\nimport {SDK_EVENT, hydraTypes, INTERNAL_US_CLUSTER_NAME, INTERNAL_US_INTEGRATION_CLUSTER_NAME} from './constants';\n\nconst hydraBaseUrl = 'https://api.ciscospark.com/v1';\n\nconst isRequired = () => {\n  throw Error('parameter is required');\n};\n\n/**\n * Constructs a Hydra ID for a given UUID and type.\n *\n * @export\n * @param {string} type one of PEOPLE, TEAM, ROOM\n * @param {any} id identifying the \"TYPE\" object\n * @param {string} cluster containing the \"TYPE\" object\n * @returns {string}\n */\nexport function constructHydraId(\n  type = isRequired(),\n  id = isRequired(),\n  cluster = 'us'\n) {\n  if (!type.toUpperCase) {\n    throw Error('\"type\" must be a string');\n  }\n\n  if ((type === hydraTypes.PEOPLE) || (type === hydraTypes.ORGANIZATION)) {\n    // Cluster is always \"us\" for people and orgs\n    return encode(`ciscospark://us/${type.toUpperCase()}/${id}`);\n  }\n\n  return encode(`ciscospark://${cluster}/${type.toUpperCase()}/${id}`);\n}\n\n/**\n * @typedef {Object} DeconstructedHydraId\n * @property {UUID} id identifying the object\n * @property {String} type of the object\n * @property {String} cluster containing the object\n */\n\n/**\n * Deconstructs a Hydra ID.\n *\n * @export\n * @param {String} id Hydra style id\n * @returns {DeconstructedHydraId} deconstructed id\n */\nexport function deconstructHydraId(id) {\n  const payload = decode(id).split('/');\n\n  return {\n    id: payload.pop(),\n    type: payload.pop(),\n    cluster: payload.pop()\n  };\n}\n\n/**\n * Constructs a Hydra ID for a message based on internal UUID\n *\n * @export\n * @param {any} uuid\n * @param {string} cluster containing the message\n * @returns {string}\n */\nexport function buildHydraMessageId(uuid, cluster) {\n  return constructHydraId(hydraTypes.MESSAGE, uuid, cluster);\n}\n\n/**\n * Constructs a Hydra ID for a person based on internal UUID\n *\n * @export\n * @param {any} uuid\n * @param {string} cluster containing the person\n * @returns {string}\n */\nexport function buildHydraPersonId(uuid, cluster) {\n  return constructHydraId(hydraTypes.PEOPLE, uuid, cluster);\n}\n\n/**\n * Constructs a Hydra ID for a room based on internal UUID\n *\n * @export\n * @param {any} uuid\n * @param {string} cluster containing the room\n * @returns {string}\n */\nexport function buildHydraRoomId(uuid, cluster) {\n  return constructHydraId(hydraTypes.ROOM, uuid, cluster);\n}\n\n/**\n * Constructs a Hydra ID for an organization based on internal UUID\n *\n * @export\n * @param {any} uuid\n * @param {string} cluster containing the organization\n * @returns {string}\n */\nexport function buildHydraOrgId(uuid, cluster) {\n  return constructHydraId(hydraTypes.ORGANIZATION, uuid, cluster);\n}\n\n/**\n * Constructs a Hydra ID for an membership based on an\n * internal UUID for the person, and the space\n *\n * @export\n * @param {any} personUUID\n * @param {any} spaceUUID\n * @param {string} cluster containing the membership\n * @returns {string}\n */\nexport function buildHydraMembershipId(personUUID, spaceUUID, cluster) {\n  return constructHydraId(hydraTypes.MEMBERSHIP,\n    `${personUUID}:${spaceUUID}`, cluster);\n}\n\n/**\n * Returns a hydra cluster string based on a conversation url\n * @private\n * @memberof Messages\n * @param {Object} webex sdk instance\n * @param {String} conversationUrl url of space where activity took place\n * @returns {String} string suitable for UUID -> public ID encoding\n */\nexport function getHydraClusterString(webex, conversationUrl) {\n  const internalClusterString =\n    webex.internal.services.getClusterId(conversationUrl);\n\n  if ((internalClusterString.startsWith(INTERNAL_US_CLUSTER_NAME)) ||\n    (internalClusterString.startsWith(INTERNAL_US_INTEGRATION_CLUSTER_NAME))) {\n    // Original US cluster is simply 'us' for backwards compatibility\n    return 'us';\n  }\n  const clusterParts = internalClusterString.split(':');\n\n  if (clusterParts.length < 3) {\n    throw Error(`Unable to determine cluster for convo: ${conversationUrl}`);\n  }\n\n  return `${clusterParts[0]}:${clusterParts[1]}:${clusterParts[2]}`;\n}\n\n/**\n * Returns a Hydra roomType based on conversation tags\n *\n * @export\n * @param {arra} tags\n * @param {any} spaceUUID\n * @returns {string}\n */\nexport function getHydraRoomType(tags) {\n  if (tags.includes(SDK_EVENT.INTERNAL.ACTIVITY_TAG.ONE_ON_ONE)) {\n    return SDK_EVENT.EXTERNAL.SPACE_TYPE.DIRECT;\n  }\n\n  return SDK_EVENT.EXTERNAL.SPACE_TYPE.GROUP;\n}\n\n/**\n * Returns file URLs for the activity, adhering to Hydra details,\n * e.g., https://api.ciscospark.com/v1/contents/Y2lzY29zcGF...\n * @see https://developer.webex.com/docs/api/v1/messages/get-message-details\n * @param {Object} activity from mercury\n * @param {string} cluster containing the files\n * @returns {Array} file URLs\n */\nexport function getHydraFiles(activity, cluster) {\n  const hydraFiles = [];\n  const {files} = activity.object;\n\n  if (files) {\n    const {items} = files;\n\n    // Note: Generated ID is dependent on file order.\n    for (let i = 0; i < items.length; i += 1) {\n      const contentId =\n        constructHydraId(hydraTypes.CONTENT, `${activity.id}/${i}`, cluster);\n\n      hydraFiles.push(`${hydraBaseUrl}/contents/${contentId}`);\n    }\n  }\n\n  return hydraFiles;\n}\n"]}