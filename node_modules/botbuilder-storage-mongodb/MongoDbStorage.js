"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongoDbStorage = void 0;
const mongodb_1 = require("mongodb");
class MongoDbStorage {
    constructor(collection) {
        this.targetCollection = collection;
    }
    read(stateKeys) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!stateKeys || stateKeys.length == 0) {
                return {};
            }
            const docs = yield (yield this.targetCollection.find(MongoDbStorage.createQuery(stateKeys))).toArray();
            const storeItems = MongoDbStorage.packStoreItems(docs);
            return storeItems;
        });
    }
    write(changes) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!changes || Object.keys(changes).length === 0) {
                return;
            }
            const operations = MongoDbStorage.createBulkOperations(changes);
            yield this.targetCollection.bulkWrite(operations);
        });
    }
    delete(keys) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!keys || keys.length == 0) {
                return;
            }
            yield this.targetCollection.deleteMany(MongoDbStorage.createQuery(keys));
        });
    }
    static packStoreItems(items) {
        return items.reduce((accum, item) => {
            accum[item._id] = item.state;
            return accum;
        }, {});
    }
    static createQuery(stateKeys) {
        return { _id: { $in: stateKeys } };
    }
    static createBulkOperations(changes) {
        const operations = [];
        Object.keys(changes).forEach(key => {
            const state = changes[key];
            const shouldSlam = MongoDbStorage.shouldSlam(state.eTag);
            const oldETag = state.eTag;
            state.eTag = new mongodb_1.ObjectID().toHexString();
            operations.push({
                updateOne: {
                    filter: MongoDbStorage.createFilter(key, oldETag),
                    update: {
                        $set: {
                            state: state
                        },
                        $currentDate: {
                            dt: { $type: 'date' }
                        }
                    },
                    upsert: shouldSlam
                }
            });
        });
        return operations;
    }
    static shouldSlam(etag) {
        return (etag === '*' || !etag);
    }
    static createFilter(key, etag) {
        if (this.shouldSlam(etag)) {
            return { _id: key };
        }
        return { _id: key, 'state.eTag': etag };
    }
    static getCollection(client, dbName = MongoDbStorage.DEFAULT_DB_NAME, collectionName = MongoDbStorage.DEFAULT_COLLECTION_NAME) {
        return client.db(dbName).collection(collectionName);
    }
}
exports.MongoDbStorage = MongoDbStorage;
MongoDbStorage.DEFAULT_COLLECTION_NAME = "BotFrameworkState";
MongoDbStorage.DEFAULT_DB_NAME = "BotFramework";
//# sourceMappingURL=MongoDbStorage.js.map